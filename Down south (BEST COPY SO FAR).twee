:: StoryTitle
Down south


:: StoryData
{
  "ifid": "E5972059-849E-4F47-9A35-885B14B2E800",
  "format": "SugarCube",
  "format-version": "2.37.3",
  "start": "Warning",
  "zoom": 0.6
}


:: A look at their history {"position":"950,0","size":"100,100"}
Americans called it Manifest Destiny, a term that meant the land they were "finding" was given to them by God. In turn, they were to follow God's will and move westward. They would travel far from the original colonies and expand. 

This expansion often came at the expense of the indigenous cultures that existed long before Vespucci "discovered" America, before LaSalle claimed the land as his own with a cross and a word. Around this time, a large number of tribes suddenly disappeared, and well, American history and historians do not seem to have all the information about where they went. How can it be so fucking divisive a subject? White man came, saw brown man… brown man saw white man and tried to be kind, but they were afraid… because white man had big shiny and unnatural guns. So they ran away… or in fear did as one does in the wilderness, kill or be killed. So, then the white man did as white man does, they killed until there was no more brown man, or the rest of the brown men were driven more northward or northwestward.

One tribe, however, was able to manifest their own destiny, and they went east. A group of Bayogoulan natives had moved from their river location in future Louisiana and into the wilderness, a large region that may one day be known as Azure Cove.

[[next|p1.history]]


:: Alice's Wet Nightmares {"position":"325,1225","size":"100,100"}
They would always start with a younger black woman named Alice, half-dressed and tossing and turning in bed in her sheets. The alarm would go off at exactly 0515 - raise your glasses, for those civvies who don’t know how to read military time - 5:15 in the morning. She would get dressed, but not quite right. 

Something would be missing: half a scrub leg; her bra, but on a particularly chilly day on the rounds, and when there were a bunch of men in her unit. And her boss, an old-fashioned Christian woman, wearing a long khaki skirt, a modest top and sweater, and her hair in a bun, says, "Get over it...you're a lady. Wear something more modest and maybe they will leave you alone.” And then you laugh and laugh while she goes around putting the wrong medications in the wrong cups and watching all the boys go down and down and down. And then she wakes up and the channel goes to a fake commercial. And then you flip to the [[next channel]].


:: Author's Note {"position":"1100,650","size":"100,100"}
The story that you are about to embark upon is not normal… in fact, it is quite full of many interesting and strange stories that twist and turn and flux like something from M.C. Escher. Someone could say it’s related to Danielewski, but it’s not.

The author has taken time to craft something, unique… familiar yet jarring, and with a sense of exploration like that of a Bethesda game. 

This is a sort of CYOA, Choose Your Own Advnture story—but this is also a bible… A great book full of many stories and tales and parables and many other things that can make someone say, ‘yea’ or ‘nay’, due to its ‘wokeness’ or the truths it shares. Read all of it, or pick at it. Consume it like a choose your own adventure book… or pick it up from anywhere.

Be mindful though—each time you read, a new instance will have been created and you will put out another Dick, or Chuck, or Bob, or Mercy, or Clint or whomever, into the universe… will you let them sit in a catatonia, or will you further there demises? 

The content is yours to play with and try to understand… just don’t get too complacent in your complicity. The following prelude, for instance, introduces you to the authors style and what you should prepare yourself to read… well… sort of… 

It is better that you just read it.

[[Credits]]


:: Credits {"position":"1100,525","size":"100,100"}
© 2025 Wendel Lux. All Rights Reserved.

"Down South" was created by Wendel Lux, a writer exploring the intersection of 
Southern Gothic fiction and magical realism. This interactive experience 
blends traditional storytelling with modern digital techniques.

This project was developed with assistance from AI tools including Claude by Anthropic.

All creative direction, narrative elements, and final editing decisions remain the 
intellectual property of the author.

This interactive fiction and all its contents including text, code, graphics, 
characters, and story elements are the exclusive intellectual property of Wendel Lux.

Viewing for personal enjoyment is permitted, but reproduction, distribution, 
derivative works, or commercial use is prohibited without explicit written permission.

For permissions or inquiries: wendelluxor@gmail.com | @wendelluxor


:: Death {"position":"1350,1200","size":"100,100"}
<span style="display:inline-block; animation: shake 0.5s infinite;">You have <span style="font-size: 2em; color: #FF0000; text-shadow: 0 0 10px #FF0000;">DIED</span>.</span>

<<set _deathMessages to ["Your consciousness dissolves into the ether.", "The Stacks have claimed another victim.", "M'RKATH'NEB has consumed your essence.", "Reality has rejected your narrative thread.", "The existential knot has tightened around your soul."]>>
<<print _deathMessages[random(0, _deathMessages.length - 1)]>>

<<if $deathCount eq 1>>
<span style="display:inline-block; animation: glitch-flash 3s infinite;">This is the first fracture in your reality.</span>
<<elseif $deathCount eq 2>>
<span style="display:inline-block; animation: glitch-flash 3s infinite;">Twice now, you've been unmade. The pattern begins to form.</span>
<<elseif $deathCount eq 3>>
<span style="display:inline-block; animation: glitch-flash 3s infinite;">Three deaths. The triad is complete. Perhaps now you understand.</span>
<<else>>
<span style="display:inline-block; animation: glitch-flash 3s infinite;">Death has become familiar. You've been here $deathCount times now.</span>
<</if>>

The void reaches out:

[[Return to Azure Cove?|Start]]


:: Dick freaks, and so Chuck freaks {"position":"2450,1850","size":"100,100"}
Dick got a very dark feeling… almost as if something was watching him—lurking from inside the priory.

He felt an uneasiness at whatever it was he felt, and began to breathe very hard, his heart rate increasing until his ears felt hot and his head began to itch. Then he saw something, a long shadow, seven-foot-tall at least—sporting a long-bone face. 

A skull. 

A deer skull. 

This thing had not yet noticed them, until Dick whispered, “What the fuck…” under his breath.

The moment it heard the whispering, it turned and charged towards the boys. It had the backs legs of a deer and on its top half, human arms, with claws… or something sharp and glowing… that extended out its of ‘hands.’ Dick began to immediately run, whilst Chuck pulled out his butterfly knife and held it up in the air.

The creature jumped towards the knife then simply phased through it. Then with one long pulling back of the arm and elbow, and an equally long slamming down slamming down—the large creature began to rip Chuck apart. Then Dick started to hear a laugh, very distinctly, the laugh of the Skull Kid from the Legend of Zelda: Majora’s Mask. 

HaHAAhahahahh. 

The sound coming from right behind him. Then from above him…

haHahaHAHAHA. 

The sound of this laugh changed into a high-pitched laugh scream. It came out of nothing… and yet, it began to multiply… it began to become louder and louder as it started to appear in front of him. Behind him again. Beside him on each side… until everywhere around him was the sound of screams warbling. It was surrounding him getting louder and louder, yet muffled just enough to become otherworldly, like trying to talk to someone with your head underwater.

Dick screamed out loudly, but was darted with a weird glowing liquid. Falling to ground with a loud thud, he looked up at the creature and saw it slowly morphing into a human. 

Into Chuck.

<<link "Hear M'RKATH'NEB">>
  <<run playSound('mrkath')>>
  You hear an otherworldly voice speaking directly into your mind...
<</link>>


:: Dick ponders {"position":"2250,1775","size":"100,100"}
He continued to sit and think for what felt like another minute, but with the rush of his drug use and the distortion of time, a minute could have been an hour.
He had just realized, if he had ever learned, what the word priory meant. For the most part, people from The Quarters do not know how to read. (Not in all cases, but it was true of this village.) But sadly, no one here knew what a priory was. The people of Shellhaven often wonder why a college was ever built here.

You see, Dick and Chuck were in their late 20s - 26 and 28, respectively - and had little education, having been removed from their families when they were very young due to mental retardation. Another common occurrence for people in methladen cities. Add this to the epidemic that is methamphetamine, which can and does spread like wildfire wherever it is distributed. The target demographic? The poorer cities. The cartels and MC's want to say they mean well; they think they are helping people; giving them some peace of mind or energy. And they tend to go after the men and women who will do just about anything to get something, like transport drugs, or act as a mule, or...well, you get the idea. Color does not matter, the system worked, clearly. Why try to break it? Who else is going to be brave enough to move a kilo across the country for three hundred bucks and a quickie?

Dick and Chuck knew they were easy targets. They just wanted to make their own money. That wasn't from an online slots game they played on their dollar store Luxdroid phones. Or in the credit of some rebel MC. So the two often went on long treks, and one day they found themselves walking from the northern neighborhoods to the eastern shore of Graveline Bay. They knew that there was a large group of abandoned buildings near the southern edge of Shellhaven.

In modern times, this group of buildings was officially owned by the Maurepas University of Science, Cryptology, Arts, and Technology. But a few centuries earlier, French settlers had built and established small colonies there, in what was then the Louisiana Territory. They stayed only half a decade. No colony lasted, and the buildings became ghost towns. Until, in the early 19th century, Native American tribes moved into these long-abandoned buildings. The natives had recently converted and embraced a hybrid form of Christianity, much like the Mexican folk beliefs, that blended their natural and spiritual beliefs with the rites of Catholicism.

The Holywildists, as some would learn years later, spent decades taking the old buildings and rebuilding them into a large chapel and a few other buildings - their own priory. Their beliefs went largely unchecked by the Roman Catholics for a while, and so they had established their own dogma. This was until their beliefs began to become more profane over time, and their ideas quickly spread—speaking of strange deities that lived under the ocean and high above the clouds; and magical situations beyond the miracles of the Church.

The Pontifical Catholic University of Maurepas (later renamed MUSCAT after it was bought by a private company), ran by the Roman Catholic Church, knew that the group had been squatting in the buildings north of the river, and so they tried to buy the land out from under them. They bought it - and with great force evicted all those local "cultists". 

After investigating, they found information about what these "cultists" called a Chapel of Mass Despair. A local newspaper even wrote about the cult and the Catholic 'quarrel'. Some handwritten books were found. They were described by the archbishop as 'a bastard mixture of Latin and hieroglyphics'.

In the basement of the chapel, there were strange stone bas-reliefs that appeared to extend down a wall. One depicted a raised map of the cemetery, translated as "The Cemetery of Mass Despair.” It was just north of the chapel. Another stele down the line described a ritual involving a crypt with a diamond on it.  The rest of the reliefs depicted the ritual and how this crypt could provide access to a deity, "a deity of evil not known as the eternal Yahweh.” The last relief was quite different. It showed a titanic thundercloud with a thousand tendrils reaching out in the prevailing winds and spreading in every direction.

The Catholics were terrified and reacted in their typical way. They tried to erase the whole ordeal from history. They condemned and damned the whole place, covering the buildings with wooden planks and giving the place the appearance of an apocalyptic shelter. A search of Catholic records from the Archdiocese of Mobile and the Diocese of Biloxi was fruitless, although enough digging and information can be found.

Since then, the site has become a "haven" for all sorts of shady things, from mundane things like dealing to bizarre things like shooting stag movies... Whispers circulated about a satanic cult performing sacrifices there. Another story told of a massive metal or stone mortar that would fly and carry an old woman who would disappear without a trace. Once, as teenagers, Dick and Chuck even tried to film a zombie apocalypse movie at the site, but the tapes mysteriously disappeared. Dick and Chuck still often found themselves walking to the Priory. They loved going to the "old apocalyptic church site". Even though their families told them to stay away. 
Dick and Chuck usually disregarded their families' advice and enjoyed their defiance. They usually tried to find a place out of sight to partake of their bounty. 

After a few hours of trudging, they usually stumbled upon the Priory - now marked with huge white signs that read in big, bold red letters:

(text-colour:red)+(bg:white)[THIS PROPERTY IS UNDER THE ADMINISTRATION OF THE MAUREPAS UNIVERSITY OF SCIENCE, CRYPTONOMICS, ART, AND TECHNOLOGY.
NO TRESPASSING - PUNISHABLE BY LAW.
VIOLATORS WILL BE FINED UP TO $500.
]

They did not care what the sign in front of them said. They knew what trespassing was and had known since they were young teenagers. Their parents were close friends and had taken them to all sorts of sketchy places and neighborhoods along the Mississippi coast.

Chuck Sr. had been arrested in 2005 for trespassing on the Mississippi State Docks right after Katrina. The rest of the family was there, too—Chuck Sr. and John Paul told everyone. 

"Laws are just suggestions...they are there to keep you down. The natives lived off the land and so should we. Fuck the government!"

John Paul then began his climb. Moments after he climbed over the rusty and storm-damaged fence and ran ten feet forward, a SWAT team appeared and jumped him. The families hid in the dark and watched as they dragged his brutalized body into a black van and drove off down the docks. In a manic panic, they ran northwest toward the neighborhood.

Chuck never saw his father again, and their family connection became almost indistinguishable. He remembered seeing a plane take off for a ship in the Gulf.

So, yes, the two brothers and best friends knew what trespassing was...but they also knew that nothing would happen on this occasion - having visited the Priory a few times in their teens. 

This was something different now, though… They stopped and stared at the sign for a couple of minutes.

[[Dick freaks, and so Chuck freaks]] 
[[


:: Enter the Stacks {"position":"2350,775","size":"200,200"}
The author Mary Allice Kellogg once said:

<blockquote>"Are there <span class="shake-text">really</span> ghosts in the South?
You bet your <span class="pulse-text">sweet</span> magnolia there are! The <span class="bounce-text">antebellum</span> South isn’t dead—it’s merely <span class="caterpillar-text">wandering, rising, hovering and drifting</span> from plantation to plantation, searching for lost loves and old enemies. And in the process, it’s scaring the bejesus out of a lot of normally sensible folk.”</blockquote>

One could almost agree, but one <<asciitriquetra>>lacks<</asciitriquetra>> the proper knowledge of the world. These are <<distort>>spirits<</distort>>, yes... but there is more to it. 

It is <span class="shake-text" style="font-size: 250%;">okay.</span>

There is no need to be angry or abusive about such a petty thing. In truth, as seen by those who are more in tune with the Meta, the world is just one manifestation after another. The spirit of each age is in a little thing called the brain. Overall, the brain is capable of many things, many very normal, unusual, fickle and/or fucked up things. But the greatest thing it can do is manifest. 


What is <<distort>>manifestation<</distort>>?

Good question
<<distort>><span style="font-size: 150%;">Manifestation</span><</distort>>, 
simply put, is intention. 

The intention to do something comes about through
<<distort>><span style="font-size: 300%;">MANIFESTATION</span><</distort>>. 
<<malfunction>>Manifestation<</malfunction>> and intention are intertwined, but not in a closed loop, like infinity. Instead, manifestation and intention must work with one's beliefs, leading to what is called "reality. That is. Reality is the full manifestations of one's intentions and beliefs... or reality is the intentions of one's beliefs and their manifestations. Or, must we go on? Life is made up of many analogous triquetra, just look around. 

The <<malfunction>><span style="font-size: 700%;">South</span><</malfunction>>ha(d/s) many beliefs, manifestations and intentions - and their reality is still reaping their abuse on harmony.

How else could one explain a sunshine city that still exists in the mid 2020s, and what... we don't need to learn about how to include people? 

How else can we explain the horrible things that are said about immigrants and races and other things? 

This mentality grew as a large part of the 
<<static>><span style="font-size: 500%;">MANIFESTATIONS</span><</static>> 
of the white antebellum enslavers and then the horrible, deliberately made, regressive policies... put in place to create barriers for people who were not of original descent to the thirteen colonies. At least that is one of the many conspiracies that people can spread. Unfortunately, we cannot control the minds of others, and we have no idea what their intentions may ever be... so we just have to roll with the punches and see how reality changes around us. 

This was the case everywhere in America except <<twitch>>Azure Cove<</twitch>>.  

<<flash "mrkath">><<corrupt>>
[[Keep sifting through the Stacks shit]]

[[Micah D's Recording]]
<</corrupt>><<endflash>>


:: Everybody is! {"position":"100,1400","size":"100,100"}
I wouldn't even dare say that the Moonlighters are an evil group of people, not at all...in fact, they were beyond kind. 

They are pescatarians, and their victims are only the unthreatened creatures from out of the water. 

Hell! One of the first mantras Father Mercurius taught the journeymen was one of his own creation.

--यतो ह्यस्य परमो लाभस्ततो ह्यस्य परमा हानिः
--(yato hyasya paramo labhastato hyasya parama haanih)
--For what is their greatest gain is their greatest loss.

It is clear that their sacrifices are great and affected, as are they. I first observed some of these sacrifices - a swordfish, a flounder, a pufferfish, a blacktip shark, a nurse shark, and even a dolphin. 

Each rite was very elaborate, filled with a dense and well-thought-out liturgy. 
But it was the last part that always blew me away. It was the elaborate effects they put together for the binding rites. 

They had devised some sort of technology that allowed them to display their spirit animals - jumping out of the sacrificial corpse and into the soul of their supplicant. 
In short, it looked like the projected souls of the animals were jumping into a projected "mental" image of the people who sacrificed them. 

It was more than bizarre, but also fascinating. Father Mercurius said [[I should be up soon.]]


:: Find the Moonlighters {"position":"925,925","size":"200,200"}
Ahh... the Moonlighters. An odd little cult, akin to something like the True Knot, except they feed on marine life...

This path has led to one of many crossroads.

Maybe look into [[The Ritual]]...

Or maybe check out [[Wendel's Dream Journal]]...

Something about [[a firefighter]]...

[[Jeromy's Big Day]]

[[Look at the post office box on that sidewalk in city center|firstletter]]


:: I did this in reverse {"position":"225,1525","size":"100,100"}
My true body seized and I felt a relief that I had never felt before. 

I was free of all human guilt. I was no longer connected to my weak physical form.

I was now a part of this being. We were our own creation.

I stepped out into the gulf with our new body... and looked down at the water.

I could faintly see the mantle of this creature fused with the human flesh and form of my former self.

We turned toward the moonlighters with a ferocity I was completely unaware of, being a follower of ahimsa (non-violence) from birth.

Our being screamed with a power that Samson probably screamed the day his hair grew back and he toppled the pillars of the temple.

I've held back our hungry urges for now...but the Moonlighters ran back in terror and fled Deer Island.

It has been years since I have seen them, perhaps they are finished with their rites for now...

For now, we rest in a strange abode made of a large reef - on the ocean floor of the Mississippi Sound.

[[Head back to Azure Cove|Start]]


:: I should be up soon. {"position":"100,1525","size":"100,100"}
The days passed in a rush and a breeze as I drove back and forth between the corner store and Plummer Point.

In time, I had even tried a hit of the real "ganja," as Father Mercurius would say in his thick Jamaican patois.

Patois, another word I recently learned...like a dialect that, to save a long explanation, is not registered by the government or anything. 

I thought my first cannabis experience was going to kill me, the panic attack I had... 
I accidentally called an ex-boyfriend and asked him if he was mad at me for leaving him - and before he could answer, a woman named Pié de Tarantino took my phone. And that is pronounced like pee-yeh, by the way.

This same ex tried to contact me almost six times in the three weeks it took for my rites to take place.[[It was kind of hard for a while.]]


:: It was kind of hard for a while. {"position":"100,1650","size":"100,100"}
I saw many more of these rites before mine, each person was told weeks in advance that they would be connected to a soulmate. This soul mate would be a guiding light for the weary worker until he or she received Beneficence.

We would all depart from the pier in a flotilla, heading for Deer Island - where the first step, the Wood Rites, would begin.

Father Mercurius, the petitioner, and her soulmate would "suss out" a medium to large tree. The tree would be chosen for its abundance of branches and the hardness of its bark. 

Though strangely, from a distance, we could never see Father Mercurius...only the struggle of the other two, heading in a laborious direction that seemed to be fated. 

They would spend about thirty minutes searching for a branch about half the size of their human bodies. Once they found it, they began to hack away at it.

All the while, the group of moonlighters behind them chanted a mix of the Gayatri mantra over a drone of drums. Played on what I had also recently learned were kbandu. A type of instrument used in Kumina, an Afro-Jamaican religion.

[[Then came the...]]


:: Jeromy's Big Day {"position":"900,725","size":"100,100"}



:: Keep sifting through the Stacks shit {"position":"1750,750","size":"100,100"}
The whole regions seemed to be either stuck in a <<loopy>>loop<</loopy>> or just kind of standing still...the people there seemed unable to age or barely aging, or were they even there in the first place? Who are these people, and what is Azure Cove? Great question, it doesn't exist. It does, but it is in the middle of somewhere in Mississippi and the fabric of the universe that exists in all dimensions. Azure Cove wants nothing to do with anyone, but it has to be in their lives now. It is there and it cannot move...well, it can, but it must remain in this miserable piece of land for as long as the world can stay afloat. 

Unable to do anything but watch, and having watched for so long, reality manifested itself - it too learned to manifest reality. It had been dormant, unable to truly control - but eons passed and it too became an even greater source of power in Harmonious Existence. The Department of Psychic Affairs thought they had a clue as to what was going on with Azure Cove - they had been conducting a study, perhaps even a project, for years. Part of a small initiative to study places known to some as Existential Knots. These areas were known for their massive readings and interference with just about any type of device that used waves to transmit signals or data. The people of Shellhaven rarely got on their cell phones, but when they did - they all noticed that they were Luxdroids... and on a cell channel called "Luxy". 

They could see that all the places around them seemed to have Lux written on them - well, all but one. A large and impressive building that seems to grow out of nowhere, just down the street from the men's dorm. Just walk down and turn right on Graveline Pass.

This mass of concrete and steel stretched for about 40 stories... and expanded north, south, east and west in a massive plaza. Less than half the size of the Pentagon (15 acres) or two Walmarts (6+6 acres) reshaped into nearly perfect squares - that is the size of this structure. Or you could say two Kowloon Walled Cities. If you don't know what that is, it's a very fascinating study. The Kowloon Walled City was a large and formidable structure, about 6 acres or 2.6 hectares, that was built on the edge of society - when the Chinese decided to give some of their land away to the British in the very late 19th century, and then it was given back. After a while, the area became a sort of haven for refugees from the Chinese Civil War, and then soon became its own enclave, de jure. To explain what this means, think of Zaofu from Legends of Korra. Though not canonically called an enclave, Zaofu was an autonomous state occupying the southern border of the Earth Kingdom. The Earth Kingdom did not actually give them the territory, the Metal Clan took it by force and built a bigger and stronger army with technologically advanced weapons made of metal rather than the more "archaic" elemental-based tools of war used by the kingdoms. Because the Metal Clan was so powerful, the people of the Earth Kingdom could not dream of building an offensive, and so the city remained. Not really legal, but it exists and it just is. Like how people automatically assume that tipping is just a fact of reality, when in fact it is a de jure idea concocted by humans to ensure proper service. Tips were never a fact of reality, we just made it a fact - and then when people realized that tips could be taxed and that people could get away with outright crimes by paying their employees another taxed two dollars an hour and banking the extra. That was the walled city of Kowloon, a large and formidable place with no law sitting in the middle of "civilization."

[[Still too much reading...]]


:: Loading {"position":"1500,825","size":"100,100"}
<style>
  .loading-container {
    background-color: #000000;
    text-align: center;
    padding: 50px;
    font-family: "Courier New", monospace;
    height: 80vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    overflow: hidden;
  }
  
  /* Add scan lines overlay */
  .loading-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, 0.15),
      rgba(0, 0, 0, 0.15) 1px,
      transparent 1px,
      transparent 2px
    );
    pointer-events: none;
    z-index: 10;
  }
  
  /* Add noise overlay */
  .loading-container::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('data:image/svg+xml,%3Csvg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg"%3E%3Cfilter id="noise"%3E%3CfeTurbulence type="fractalNoise" baseFrequency="0.65" numOctaves="3" stitchTiles="stitch"/%3E%3C/filter%3E%3Crect width="100%" height="100%" filter="url(%23noise)" opacity="0.05"/%3E%3C/svg%3E');
    background-repeat: repeat;
    pointer-events: none;
    z-index: 9;
    opacity: 0.05;
  }
  
  .loading-text {
    color: #00FF00;
    margin-bottom: 30px;
    font-size: 20px;
    letter-spacing: 2px;
    position: relative;
    text-shadow: 0 0 5px #00FF00;
    animation: text-glitch 3s infinite;
  }
  
  @keyframes text-glitch {
    0%, 90%, 100% { 
      transform: translate(0);
      text-shadow: 0 0 5px #00FF00;
    }
    92% { 
      transform: translate(-2px, 1px);
      text-shadow: -2px 0 #FF00FF, 2px 0 #00FFFF;
    }
    93% { 
      transform: translate(1px, -1px); 
      text-shadow: 2px 0 #FF00FF, -2px 0 #00FFFF;
    }
    94% { 
      transform: translate(0);
      text-shadow: 0 0 5px #00FF00;
    }
    95% { 
      transform: translate(2px, 2px);
      text-shadow: 3px 0 #FF00FF, -3px 0 #00FFFF;
    }
    96% { 
      transform: translate(-2px, -2px);
      text-shadow: -3px 0 #FF00FF, 3px 0 #00FFFF;
    }
    97%, 99% { 
      transform: translate(0);
      text-shadow: 0 0 5px #00FF00;
    }
  }
  
  .progress-bar-container {
    width: 500px;
    height: 30px;
    border: 2px solid #00FFFF;
    box-shadow: 0 0 10px #00FFFF;
    padding: 3px;
    margin-bottom: 20px;
    position: relative;
    z-index: 5;
  }
  
  .progress-bar {
    height: 100%;
    width: 0%;
    background-color: #00FFFF;
    box-shadow: 0 0 8px #00FFFF;
    position: relative;
    overflow: hidden;
  }
  
  /* Add glitch effect to progress bar */
  .progress-bar::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.4), 
      transparent
    );
    animation: progress-glitch 2s infinite;
  }
  
  @keyframes progress-glitch {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  .loading-progress {
    color: #00FFFF;
    margin: 10px 0 20px 0;
    font-size: 24px;
    animation: flicker 4s infinite;
    position: relative;
  }
  
  @keyframes flicker {
    0%, 100% { opacity: 1; }
    92% { opacity: 1; }
    92.5% { opacity: 0.2; }
    92.7% { opacity: 1; }
    94% { opacity: 1; }
    94.5% { opacity: 0.5; }
    94.7% { opacity: 1; }
    96% { opacity: 0.8; }
    98% { opacity: 1; }
  }
  
  /* Random messages */
  .system-message {
    position: absolute;
    color: #FF0000;
    font-size: 12px;
    opacity: 0;
    text-transform: uppercase;
    z-index: 20;
  }
  
  #message1 {
    top: 20%;
    left: 10%;
    animation: message-flash 10s infinite;
    animation-delay: 2s;
  }
  
  #message2 {
    top: 70%;
    right: 15%;
    animation: message-flash 8s infinite;
    animation-delay: 5s;
  }
  
  #message3 {
    bottom: 15%;
    left: 20%;
    animation: message-flash 12s infinite;
    animation-delay: 7s;
  }
  
  @keyframes message-flash {
    0%, 95%, 100% { opacity: 0; }
    96%, 99% { opacity: 0.7; }
  }
  
  .continue-button {
    margin-top: 40px;
    background-color: #000000;
    color: #00FFFF;
    border: 2px solid #00FFFF;
    padding: 10px 20px;
    font-family: "Courier New", monospace;
    text-decoration: none;
    transition: all 0.3s;
    position: relative;
    z-index: 5;
  }
  
  .continue-button:hover {
    background-color: #00FFFF;
    color: #000000;
    box-shadow: 0 0 15px #00FFFF;
    animation: button-glitch 0.3s infinite;
  }
  
  @keyframes button-glitch {
    0%, 100% { transform: translate(0); }
    25% { transform: translate(-2px, 1px); }
    50% { transform: translate(1px, -1px); }
    75% { transform: translate(-1px, -1px); }
  }
</style>

<div class="loading-container">
  <div class="loading-text">INITIALIZING ACCESS TO AZURE COVE...</div>
  
  <div class="progress-bar-container">
    <div id="bar" class="progress-bar"></div>
  </div>
  
  <div id="progress" class="loading-progress">0%</div>
  
  <div>
   <span id="start-button" style="display: none;" class="continue-button"><<link "ENTER AZURE COVE">><<goto "Start">><</link>></span>
  </div>
  
  <!-- Random system messages that appear briefly -->
  <div id="message1" class="system-message">DIMENSIONAL ANCHOR UNSTABLE</div>
  <div id="message2" class="system-message">REALITY BREACH DETECTED</div>
  <div id="message3" class="system-message">M'RKATH'NEB ENERGY SIGNATURE LOCATED</div>
</div>

<<timed 3s>>
  <<replace "#progress">>20%<</replace>>
  <<run document.getElementById('bar').style.width = '20%'>>
<</timed>>

<<timed 6s>>
  <<replace "#progress">>40%<</replace>>
  <<run document.getElementById('bar').style.width = '40%'>>
<</timed>>

<<timed 7.5s>>
  <!-- Random glitch in the progress -->
  <<replace "#progress">><span style="color: #FF00FF;">ERR%</span><</replace>>
  <<run document.getElementById('bar').style.backgroundColor = '#FF00FF'>>
<</timed>>

<<timed 8s>>
  <<replace "#progress">>40%<</replace>>
  <<run document.getElementById('bar').style.backgroundColor = '#00FFFF'>>
<</timed>>

<<timed 9s>>
  <<replace "#progress">>60%<</replace>>
  <<run document.getElementById('bar').style.width = '60%'>>
<</timed>>

<<timed 12s>>
  <<replace "#progress">>80%<</replace>>
  <<run document.getElementById('bar').style.width = '80%'>>
<</timed>>

<<timed 13.5s>>
  <!-- Another glitch near completion -->
  <<replace "#progress">><span style="color: #FF0000;">WARN%</span><</replace>>
  <<run document.getElementById('bar').style.backgroundColor = '#FF0000'>>
<</timed>>

<<timed 14s>>
  <<replace "#progress">>80%<</replace>>
  <<run document.getElementById('bar').style.backgroundColor = '#00FFFF'>>
<</timed>>

<<timed 15s>>
  <<replace "#progress">>100%<</replace>>
  <<run document.getElementById('bar').style.width = '100%'>>
  <<run document.getElementById('start-button').style.display = 'inline-block'>>
<</timed>>


:: Micah D's Recording {"position":"1250,500","size":"100,100"}
Thi-this thing workin'? Okay? 

Okay? Hi, yeah, okay...

[[next|p2.mdsr]]


:: On society {"position":"2250,50","size":"100,100"}



:: PassageHeader {"position":"0,0","size":"100,100"}
<br>


:: Plummer Point {"position":"350,1775","size":"100,100"}
A fire was burning on the point and the drumming was bombastic, so loud I could hear it in my car. The same as always on the day of the rites. I walked toward the water with fervor.

In the distance, Pié and Father Mercurius were waiting next to a wooden boat. Next to a ton of other boats filled with other Moonlighters either singing or playing instruments.

We worked our way to Deer Island to the slow beat of a drum. The chants of the Gayatri, echoed in a strange harmony for miles around... in the distance was the start of a small bonfire that would honor my sacrifice. 

I reached the island and stepped onto the shore. The earth began to tremble and shake for me and my Pié. We made our way to the top of the small dune covered with a bundle of pine trees. 

Father Mercurius appeared in a kind of cloud, right next to a large pine tree a few meters to the right of us. I was completely unaware...the whole area was covered with prickly pear cactus. So the wobble was affected by the now tedious journey of choosing the right place to step after choosing the wrong one.

We reached Father Mercurius and he smiled his big grin, this time pearls. 

The sound of swinging and beating brought me out of the trance I was in and I stared at Father's teeth. 

He laughed and handed me a machete.

"Strike di tree tank it fi his sacrifice."

I did as Father said.

I walked with the limb, half my size, down to the circle of stones at the edge of the beach. A few chairs sat by the side.

I set the branch down and the moonlighters placed small and large pieces of dry driftwood around the branch.

I made my way to the lone boat that sat at the edge of the island. The [[floating rite]] was about to begin.


:: See the quarters {"position":"2150,1625","size":"100,100"}
People in the South, especially those who live in villages like Shellhaven, will refer to the places they grew up in, which are frankly some of the worst places around, as the Quarters. This name is also commonly used by the older demographic of people who have taught their children to walk a mile in other people's shoes before they judge—and then immediately go on to judge anything that does not exactly fit their "moral" sensibilities. For the most part, the people of these places are perpetually subjugated. It does not matter who you are, The Quarters wants to drag everyone inside down with them. As their masters of the past told them. What does “The Quarters” mean in this context?

This name, unknown to most (not all) people, can easily be linked to a dark and lurid history. A quick Google search and a few minutes of reading articles would lead someone to find that The Quarters, refers directly to the place where enslaved people were forced to live during the antebellum period (that is, before the war). 

That is correct, friend. And whether they realize it or not... most people in the Deep South, regardless of race, embrace their heritage associated with The Quarters. The question from there lies in the subjective morality of the person.

It is a sad fact to think about, but the people there are proud - proud of what little they have and can be proud of. There is this place, down off Bayou Self Rd, where a man stands guard, tending to his pot plant. It grows just ten feet from the red dirt road in front of his little shack. 

Try it, take 57 north, and then turn right when you see Campbell Rd. Drive down the road until it turns into dirt, then keep going and drive a little further. Then look around and there will be houses, ramshackle and dilapidated houses, and eventually you will see him. Sitting on the back of his truck, or in a folding chair... always looking at the road and then looking back at his plant.

That is just part of the materiality—the essence of where these people live, in the Shellhaven Quarters. This is who they are, and they will defend it with their last breath. The life they have built for themselves is their own work. No one else's. Who was the government or the people or the plebeians to step on them? Hell, half of them are violent felons and/or ineligible to vote after committing federal crimes. At least, crimes that the Feds considered too minor and that just leaving them in their misery was punishment enough in and of itself. I mean... why take up space for someone who just wants to ruin their life, prisons are prisons - not rehabs. Why do you think so many states pay top dollar for people to be incarcerated? They weren't looking for junkies... no, they were looking for able-bodied men who could work for basically nothing. You know the cycle—crime, rehabilitation, recidivism. Lo que sera, sera verdad? What will be, will be right? The system really works, just sit back and relax. Let it do its thing.

And this is all true, all of it. The Founding Fathers built into the Constitution the fundamental rights of every citizen, but they also wrote the main foundations that lead to moral superiority. Only not in the name of God or any religion. You will find that the Constitution was actually written to separate religion from the state and from the law. That is the whole point of the First Amendment:
Congress shall make no law respecting an establishment of religion, or prohibiting the free exercise thereof; or abridging the freedom of speech, or of the press; or the right of the people peaceably to assemble, and to petition the Government for a redress of grievances. 

Another interesting fact, the folks in the neighborhoods, at least the younger ones, not the boomers and their kids... the boomers' kids. Most of them are agnostic or say they "don't talk to God..." They don’t even believe in the constitution. Most of them believe in whatever latest conspiracy they saw on YouTube recently.  One of them is The Light System. If you watch videos about it, that would be two hours you'll never get back from your life - but hey, these people don't work. They try, but when they get paid, they immediately relapse (or die) and then get fired for stealing from their bosses. That is the sad fact, but that is the system. The one they all say does not exist. That is oppression, systemic oppression - make someone work for nothing and then get mad when the workers complain. Neither party really cares. As long as they get that TANF or that SNAP or that good money from cheap labor... it could care less what anyone thinks. The drugs take away the guilt and the inhibitions, especially when you mix them all together. This is life, in the neighborhoods. This is home. That is safety. 

At the end of the day, you always got your bedbug infested mattress and your flea infested house and dogs and snake infested forest and you live off the land and its great... its all good in their neighborhood. That's how they grew up...you just got bit by some weird bug, just rub some dirt on it, you'll be fine. Your best friend shot you at gunpoint and you laughed it off and dug the bullet out of your stomach... that's life. There in the quarters.


:: See what Dick and Chuck are doing {"position":"2450,1700","size":"100,100"}
"I... I don't know, Chuck. I ain’t really sure I want to do this, man…” The words came out in a choke as Dick Taylor stood motionless, a six-foot-tall wax sculpture. "It... it's frightening.” He stammered.  The thick, ripe summer humidity of the Deep South on the Gulf creates an ocean of atmosphere. Fat beads of sweat pooled under his widow's peak; making his tousled, dirty blond hair shine even more in these late August dog days. 

To him, the whole thing seemed unnatural. The way the door was built into the side of a large hill, an Indian burial mound, in fact. 
The entrance reminded him of an entrance to an Egyptian tomb. Large and boxy, with walls that angled themselves upward at a forty-five. Around it were all sorts of strange logograms, or maybe hieroglyphics. Just to the side tagged on the right wall was a 3, 1, and 8; spray painted in black, white, and red.

A guffaw came from behind him.

"FRIGHTENIN?! I KNOW, YOU DIDN'T JUST SAY FRIGHTENIN?!?” Screeched that drawling voice.

Chuck Burns stood at a squat 5'8" next to Dick's right side and laughed, "You a fuckin man?" He grabbed between Dick’s legs, and then squeezed, "YEP! Still there!" 

"HEY! Y-! MOTHERFUCKER!" Dick yelped.

But still, Dick stood frozen. A thin, pallid thing that lingered for a while—crouched in the doorway of some tomb dug into a large hill. There, in that old cemetery. The one on the northern edge of the Priory… which is on the edge of Graveline Bay. Just take a long walk behind the MUSCAT dormitories, out past the stacks and walk along the eastern shore. You’ll see it.

Chuck looks around the Priory and chuckles, thinking about the strange trip the drugs must have taken them on. He starts to laugh even harder, especially now that he sees the skinny thing standing right in front of him like a scared goat. He grabs the bottom of his shirt with his left hand and wipes his own face with it before taking his right hand and slapping Dick right on the asshole. "Get your ass down to the crypt!" The loud, hollow thud from below makes Dick jump and finally move. He turns to see his brother-friend's hardened six-pack.

Chuck blurts out after another burst of laughter. "Member, those stone signs in our premonition said something about there being some, uh, magical crystal powder..."
Dick knew this, so he turned around. His mind suddenly filled with all these bizarre thoughts. These thoughts. Untraceable and uncontrollable thoughts. The first had been a mental image of Chuck, naked and about to jump into Graveline Bay... He shook it all away and began to ask himself deep questions. Obviously the drugs still had a hold on him - if he was that incapable of even trying to control his thoughts.
What had brought him to this point? Why had he let his brother-friend push him into situations like this? When or where would this crazy journey end? Who had led him so far astray, into this situation? The drugs, he knew, weren't Chuck's responsibility, he would at least give him that. 

The truth is there, he's very close. He can almost taste it. Some of it, if not all of it, seemed to come from growing up in the neighborhood, and all those damned (cursed?) places with their damned "no trespassing" signs.
... and... and from that damned, cursed priree... pryorey... whatever it was...

[[Dick ponders]]
[[Dick freaks, and so Chuck freaks]]
[[The boys jump]]


:: Start {"position":"1300,900","size":"200,200"}
<div style="max-width: 800px; margin: 0 auto 20px auto;">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 400">
  <!-- Dark background with texture -->
  <defs>
    <filter id="noise" x="0%" y="0%" width="100%" height="100%">
      <feTurbulence type="fractalNoise" baseFrequency="0.65" numOctaves="3" stitchTiles="stitch"/>
      <feBlend mode="overlay" in="SourceGraphic"/>
    </filter>
    <radialGradient id="glow" cx="50%" cy="50%" r="75%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="#00FFFF" stop-opacity="0.4"/>
      <stop offset="100%" stop-color="#000033" stop-opacity="0"/>
    </radialGradient>
    <filter id="distort">
      <feTurbulence type="turbulence" baseFrequency="0.05" numOctaves="2" result="turbulence" seed="5"/>
      <feDisplacementMap in="SourceGraphic" in2="turbulence" scale="5" xChannelSelector="R" yChannelSelector="G"/>
    </filter>
  </defs>
  
  <!-- Main background -->
  <rect width="800" height="400" fill="#000033" filter="url(#noise)"/>
  
  <!-- Ambient glow -->
  <ellipse cx="400" cy="200" rx="300" ry="150" fill="url(#glow)" opacity="0.7"/>
  
  <!-- Billboard frame -->
  <rect x="50" y="50" width="700" height="300" rx="10" ry="10" fill="#000000" stroke="#00FF00" stroke-width="5"/>
  
  <!-- Support posts -->
  <rect x="125" y="350" width="25" height="50" fill="#4B4B4B" stroke="#333333" stroke-width="2"/>
  <rect x="650" y="350" width="25" height="50" fill="#4B4B4B" stroke="#333333" stroke-width="2"/>
  
  <!-- Flickering electricity -->
  <g opacity="0.8">
    <path d="M50 50 L50 350 L750 350 L750 50 Z" stroke="#00FFFF" stroke-width="2" fill="none" opacity="0.3">
      <animate attributeName="opacity" values="0.3;0.7;0.3" dur="3s" repeatCount="indefinite"/>
    </path>
  </g>
  
  <!-- Main title -->
  <g filter="url(#distort)">
    <text x="400" y="130" font-family="Impact, sans-serif" font-size="60" fill="#00FF00" text-anchor="middle" letter-spacing="2">
      WELCOME TO
      <animate attributeName="fill" values="#00FF00;#00FFFF;#FF00FF;#00FF00" dur="8s" repeatCount="indefinite"/>
    </text>
    
    <text x="400" y="210" font-family="Impact, sans-serif" font-size="80" fill="#FF00FF" text-anchor="middle" letter-spacing="2">
      AZURE COVE
      <animate attributeName="fill" values="#FF00FF;#00FFFF;#00FF00;#FF00FF" dur="8s" repeatCount="indefinite"/>
    </text>
    
    <!-- Glitching effect on text -->
    <g opacity="0.7">
      <text x="403" y="130" font-family="Impact, sans-serif" font-size="60" fill="#00FFFF" text-anchor="middle" letter-spacing="2" opacity="0.5">WELCOME TO</text>
      <text x="397" y="210" font-family="Impact, sans-serif" font-size="80" fill="#00FFFF" text-anchor="middle" letter-spacing="2" opacity="0.5">AZURE COVE</text>
    </g>
  </g>
  
  <!-- Subtitle -->
  <text x="400" y="280" font-family="Courier New, monospace" font-size="20" fill="#00FFFF" text-anchor="middle" letter-spacing="1">
    <tspan x="400" dy="0">WHERE THE CONSUMER IS KING!</tspan>
    <tspan x="400" dy="30">POPULATION: NOWHERE!</tspan>
  </text>
  
  <!-- Flickering effect -->
  <rect width="800" height="400" fill="none">
    <animate attributeName="fill" values="rgba(0,255,255,0);rgba(0,255,255,0.03);rgba(0,255,255,0)" dur="0.3s" repeatCount="indefinite"/>
  </rect>
  
  <!-- Scanlines -->
  <rect width="800" height="400" fill="none" stroke="none" style="background-image: linear-gradient(0deg, rgba(0,0,0,0.1) 50%, transparent 50%); background-size: 100% 4px;"/>
</svg>
</div>

We now stand at the <<footnote "edge">>What makes an edge, an edge? 

The original colonizers were certain the edge of the world would spell the end, if they ever sailed off the edge. Now, we know the earth is not flat... right?<</footnote>> of a reality that shifts and bends. The skies promoting a strange color of <<distort>>purple, red, and haze of villanous green.<</distort>>

What brings <span class="grow-text" style="font-size: 250%;">you</span> here?

[[Wanna learn about the South..?]]
[[What's happenin' at the Priory?]]
[[Who are the Moonlighter's?|Find the Moonlighters]]
[[Enter the Stacks]]
[[A look at their history]]
[[Steal a car]]

<div class="time-sensitive" data-time-limit="15">
<span style="font-size: 75%;color: #FF00FF">What will happen if you click it? What will happen if you don't?</span>
In the distance, shimmering, there seems to be a strange looking book on the ground...

Strange symbols are drawn on the front in pink, all of it surrounding a bird in a gilded cage. 

As it shimmers in silence, [[the odd book]] starts to fade away.
</div>




















































































































































































































































































































































<span style="font-size: 125%; display: block; text-align: center;">
<<link "do not click me">>
  <<set $clickCounter to ($clickCounter ?? 0) + 1>>
  <<if $clickCounter eq 1>>
    <<replace "#buttontext">>ok... sure...<</replace>>
  <<elseif $clickCounter eq 2>>
    <<replace "#buttontext">>no... seriously stop<</replace>>
  <<elseif $clickCounter eq 3>>
    <<replace "#buttontext">>don't<</replace>>
  <<elseif $clickCounter eq 4>>
    <<replace "#buttontext">>click<</replace>>
  <<elseif $clickCounter eq 5>>
    <<replace "#buttontext">>me<</replace>>
  <<elseif $clickCounter eq 6>>
    <<replace "#buttontext">>okay fine...<</replace>>
  <<elseif $clickCounter eq 7>>
    <<replace "#buttontext">>3...<</replace>>
  <<elseif $clickCounter eq 8>>
    <<replace "#buttontext">>2...<</replace>>
  <<elseif $clickCounter eq 9>>
    <<replace "#buttontext">>1.5...<</replace>>
  <<elseif $clickCounter eq 10>>
    <<replace "#buttontext">>1...<</replace>>
  <<elseif $clickCounter eq 11>>
    <<replace "#buttontext">>BK... have it your way then...<</replace>>
  <<elseif $clickCounter gte 12>>
    <<goto "do not click me">>
  <</if>>
<</link>>
<span id="buttontext">do not click me</span>
</span>


:: Steal a car {"position":"1475,1125","size":"100,100"}
<<malfunction>><span style="font-size: 300%;">The car explodes...

shrapnel spraying all around 

the weird little block 

of M.U.S.C.A.T

where you stand,

near Mulholland Drive...</span><</malfunction>>


<<malfunction>><span style="font-size: 300%;">The car explodes...
shrapnel spraying all around 
the weird little block 
of M.U.S.C.A.T
where you stand,
near Mulholland Drive...</span><</malfunction>>

<<death "THE SKY IMPLODES AS THE CAR EXPLODES AND YOUR MIND FRACTURES......", 10000 "temporal_paradox">>





:: Still too much reading... {"position":"1750,600","size":"100,100"}
The same could be said of The Stacks. It was actually inspired by the Walled City to build itself, and it takes pride in its mysterious existence. The way people could go in and get lost for hours, unsure if they were going in circles, up or down, or sometimes... upside down and on the walls? Of course, existence itself is a figment of our imagination, and The Stacks could be too. But they are not - The Stacks eat people every day. And the crazy thing is, it learned how to make them, too, people. One of the tenants was a Christian and another was Islamic, and both had detailed enough explanations to allow Reality to manifest a human, out of dust. It did refine the process a bit more when a person would come in - it would take the time to send them off to the races. 

Going off to the races was this daily dance that some, if not most, of the tenants did as a way for The Stacks to determine their qualities as humans. It would be done in random sections that could be considered blocks, except that the streets were corridors and the corridors went on for half a mile, if not more. People would be taken down long street-halls that changed about every 26 seconds, enough time for Lana to finish half a verse of the song. The one that inspired the event. People would go in and hear, "My old man is a bad man, but I can't deny the way he holds my hand and he grabs me, he's got me by the heart. The people would leave and the rooms would turn into a hotel lobby. It had many rooms with strange symbols on them, and a single bell on an old countertop. In the distance you might hear someone say, "Hello!!! Is this the Oceanview Motel?" Before they peeled off, and before you entered the janitor's office. At least for those who sang... 

If you weren't singing, you suddenly felt this oppressive weight. You felt like you were carrying a log on your shoulders up a hill, and you are, but it's a cross. You are living a part of the passion of Christ. You feel the weight of the world's sins-past, present, future-filling your body and burning it like hellfire, and when you reach the top of the hill. You fall down and pass out and now you hear, "Swimmin' pool glimmerin', darling; white bikini off with my red nail polish. Watch me in the swimmin' pool, bright blue ripples you sittin', sippin' on your Black Cristal, oh, yeah..." That's all you heard if you didn't sing in the first place, or if you pretended to sing, before you started wandering around aimlessly, a Sisyphus whose boulder is looking for an exit - but you're just a man, not a god, and you're going to die soon. If you're still singing with the zeal of a true Lana stan, you keep moving forward and you're halfway there. The Stacks realize how good the song is, having come to the concept of beauty, so they let you walk through a paradise with a deepfake Lana del Rey, a paradise you were born to die for, and they let you finish the song and your walk with Lana. 

[[This is a little more interesting...]]


:: The Ritual {"position":"475,1400","size":"100,100"}
One night, a normal night, just like any other I had - some crazy shit happened... it changed me. And that's saying something to me. Why do you ask?

Well, because I was born a few years before the events of 9/11... 

I don't remember all the details of that day, but I do remember my teacher freaking out when her pager went off - and her turning the TV to some news channel. 

Seeing crazy amounts of smoke coming out of the sides of the building.

Another plane flying into the second trade center - all of us gasping in horror. And were those people? 

It could have been a child.

None of us would realize it until some thirty years later. That event was the beginning of a long, arduous, and difficult road...paved with theocratic and secular extremism. 

Culminating in a gratuitous hatred - of anyone different.

So it wasn't hard for me to join the Moonlighters. 

I had a job that did not require a drug test, and I was already smoking Delta-8 all the time...plus they seemed really nice!

I got off work around 10:13 at night. It was always around that time because I had to clean the store and turn off the pumps - before I clocked out. Then I had to turn off the lights and lock up... they gave keys to a bunch of poor, broke people. 

I took off from the Crazy Korner there in Shellhaven, the one at Bayou Road and 57--I flew down 57 towards 90 and turned right...then went to Ocean Springs.

Once you got on the bridge at 90 and Ocean Springs, you could see some beaches under the coming bridge. We call it Plummer Point.

I got off on a little road just past Lovers Lane and drove to the parking lot. The evening was quite dark, except for a small crescent moon. 

From this distance I could already smell the smoke of a campfire...and as I got closer, a strong smell of the dank.



<<flash "mrkath">><<corrupt>>But I lost my nerve--so I got in my car, went back home, and [[slept]] or <<twitch>>[[walked forward a few feet]]<</twitch>><</corrupt>><<endflash>>


:: The boys jump {"position":"2600,1750","size":"100,100"}
They jumped the eight-foot-high chain-link fences and ran into the creepy barnwood village… they ran right up to the freakishly large chapel at the end of the row.
The men threw open the doors of the old chapel and whooped. Their whoops echoed around the massive interior for a good minute before they decided to move forward, down to the altar. 

The wooden floors were cracked and dented... cracks that spread out like the legs of a spider.

The building was built in a strange way compared to most churches they had seen. It was hexagonal in shape, and the top almost looked like a pyramid... it wasn't - it was strangely misshapen, and the inside looked even stranger. The shape enhanced the acoustics somewhat, giving the cantors and other singers a sort of sonic laboratory in which to test and perform their sacramental music for their services. 
Or whatever it was called.


:: Then came the... {"position":"100,1775","size":"100,100"}
Then came the floating rites...the three ritualists would load up on a final dinghy, to the spot where their boat first hits the curves of the fingernail moon.
After moments out on the gulf, they would slowly return with their sacrifice. The chanting still goes on. All the way to the next, the binding rites, the singing and drumming went on. The whole tableau could gag the strangest person. 
Father had some interesting beliefs... another one was that species need not have any form of restraint. Except, of course, for any form of abuse of children or non-consenting adults. He knew that occasionally, when there was too much evil... a burst of violence was necessary--but never too extreme, and not required.
He prided himself on blending all the world's faiths to bring people closer to God. He had the power of God in him, and he wanted to show it--he wanted to help the world gain access to it.
He was always so confused by the shouts and screams he received when he tried to imitate the benevolent actions of Jesus. There was no place for magic, they said. They were afraid of his magic.
Magic, yes, they said, magic.
I didn't believe in it either, until my day of rites, [[which was about to come...]]


:: This is a little more interesting... {"position":"1750,450","size":"100,100"}
Unfortunately, this was only the first part of the ritual. They would only go as long as the stacks would allow them to before they debugged the humans. Those bugs were things like racism, sexism, ableism, all the bad -isms. And the test was simple. Put in front of the contestants were several different political headquarters, from all over the world. They would walk down the enclosed concrete streets of the headquarters to see which one they went into and whether or not they talked to the people and really discussed with them or whether they went in and said, "GO WHOEVER!" and then left with the paraphernalia. Those who stayed and talked were allowed to continue down the streets, but then they had to confront each other. Based on the confrontations, people would either be sent to wander or filtered. The people who were deemed worthy of being essence's would be obliterated, down to nothing, dust...and then The Stacks would take the dust, and they would be reformed into enhanced beings. Sent back into the world to provide insight into the strange events that followed their abduction. They never knew who or what abducted them, they just said they were abducted - most people thought by aliens. 

The Stacks was a formidable place, and it stood firmly in the middle of Shellhaven in the south. The people there knew that The Stacks was a strange place. But like most things, they didn't do much but talk. They had no time to worry about anyone but themselves, and if a place swallowed people up, so be it. God would take care of them, maybe? Something had to be. Otherwise the place wouldn't have people coming out of it. There was no place like home for the people who were residents, who were aware of the strange, and who made it out to return to it and call it home. The other hundreds and hundreds of thousands of people would just have their poster posted on a big corkboard wall in a grocery store until they were replaced by another victim of The Stacks, or another victim of what some would call the Fall of Mankind.


Look it says [[Micah D's Recording]]

[[Head back|Start]]


:: Wanna learn about the South..? {"position":"1375,1850","size":"100,100"}
Y’ever been Down South? Not like <<footnote "South Florida ">> NEVER, South Florida... yeah, there are definitely a lot of red voters... but that don't mean shit when the other majority is them 'BEEPOCK' libtards... y'know... immigrants from like Cuba, and those damn YANKEES...<</footnote>> or even <<footnote "Texas">>Too many hispanics<</footnote>>… they ain’t the real South. We’re talking bout the Deep South—the Bible Belt, as some say! Mississippi, Alabama, Louisiana, and the Florida Panhandle. It can be a fun place, sometimes.

<<corrupt>><span style="font-size: 110%;">As long as your white, American (no immigrants), and don’t use no woke, wussy ass language like they do in Portland.</span><</corrupt>>

[[next|p1.avts]]
[[skip on|avts pathways]]






:: Warning {"position":"1200,825","size":"100,100"}
<style>
  #warning-container {
    background-color: #000000;
    color: #00FF00;
    padding: 20px;
    font-family: "Courier New", monospace;
    text-align: center;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  .warning-text {
    max-width: 600px;
    margin: 10px auto;
    text-align: center;
    opacity: 0;
    animation: fade-in 5s forwards;
  }
  
  @keyframes fade-in {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }
  
  .warning-text:nth-child(1) { animation-delay: 0.5s; }
  .warning-text:nth-child(2) { animation-delay: 3s; }
  .warning-text:nth-child(3) { animation-delay: 5.5s; }
  .warning-text:nth-child(4) { animation-delay: 8s; }
  
  #proceed-link {
    opacity: 0;
    animation: fade-in 2s forwards;
    animation-delay: 10s;
    display: inline-block;
    margin-top: 40px;
    /* This ensures it stays visible permanently */
    animation-fill-mode: forwards;
  }
  
  #proceed-link a {
    background-color: #000000;
    color: #00FFFF;
    border: 2px solid #00FFFF;
    padding: 10px 20px;
    font-family: "Courier New", monospace;
    text-decoration: none;
    transition: all 0.3s;
  }
  
  #proceed-link a:hover {
    background-color: #00FFFF;
    color: #000000;
    box-shadow: 0 0 15px #00FFFF;
  }
</style>
<div id="warning-container">
  <div class="warning-text">This story explores themes of psychological horror, existential dread, and paranormal phenomena juxtaposed against/alongside classism, racism, sexuality, gender and identity... you name, we got it...</div>
  <div class="warning-text">The events depicted may cause distress to some readers.</div>
  <div class="warning-text">Azure Cove is not a place for the faint of heart.</div>
  <div class="warning-text">Proceed at your own risk...</div>
  <div class="warning-text">This narrative thread is still under construction...</div>
  
  <div id="proceed-link">[[Okay... go on ahead...|Loading]]</div>
</div>


:: Wendel's Dream Journal {"position":"950,1225","size":"100,100"}



:: What's happenin' at the Priory? {"position":"2400,1300","size":"200,200"}
Arriving at a large fence, there seems to be some village. An ancient structure looms in the back, its history written in stone and forgotten rituals.


[[See what Dick and Chuck are doing]] 
[[See the quarters]]


:: a firefighter {"position":"675,925","size":"100,100"}



:: avts pathways {"position":"1350,1425","size":"100,100"}
<<malfunction>><span style="font-size: 150%;">Okay.... so, what you wanna do now?</span><</malfunction>>

[[See what Dick and Chuck are doing]]
[[Go see a ritual|The Ritual]]
[[Enter the Stacks]] 
[[Find the Moonlighters]] 
[[See the quarters]]
[[Go back to the beginning?|Start]]


:: do not click me {"position":"1275,650","size":"100,100"}
<div id="glitch-container" style="text-align: center; margin: 20px 0; font-family: monospace;">
  <div style="color: #FF0000; text-shadow: 2px 2px 0 #800000, -2px -2px 0 #FF00FF; font-size: 18px; letter-spacing: 1px;">
    Good one... now let's maybe not click every button.
  </div>
  
  <div style="margin-top: 15px;">
    <<script>>
      // Create a full-screen glitch overlay
      const overlay = document.createElement('div');
      overlay.id = 'glitch-overlay';
      overlay.style.position = 'fixed';
      overlay.style.top = '0';
      overlay.style.left = '0';
      overlay.style.width = '100%';
      overlay.style.height = '100%';
      overlay.style.backgroundColor = '#000033';
      overlay.style.zIndex = '9999';
      overlay.style.overflow = 'hidden';
      
      // Add glitch text in the center
      const text = document.createElement('h1');
      text.id = 'glitch-text';
      text.style.position = 'absolute';
      text.style.top = '50%';
      text.style.left = '50%';
      text.style.transform = 'translate(-50%, -50%)';
      text.style.color = '#FF0000';
      text.style.fontSize = '4em';
      text.style.whiteSpace = 'nowrap';
      text.style.textShadow = '0 0 10px #FF0000';
      text.textContent = 'FATAL ERROR';
      
      // Add it to the page
      overlay.appendChild(text);
      document.body.appendChild(overlay);
      
      // Try to play a glitch sound if needed (optional)
      try {
        const audio = new Audio();
        audio.src = "https://static.wixstatic.com/mp3/f3adad_9ee367356f6d486083459f5f6d7dfa91.wav"; // Using a reliable free source
        audio.volume = 0.5;
        audio.play();
      } catch (error) {
        console.error("Audio couldn't play, continuing without sound");
      }
      
      // Array of glitch messages - more disturbing ones
      const glitchMessages = [
        'CONSUMED', 
        'SYSTEM FAILURE', 
        'FATAL ERROR', 
        'BREACH DETECTED', 
        'SHUTDOWN',
        'HELP ME',
        'THEY\'RE COMING',
        'DON\'T LOOK',
        'REALITY FRACTURE',
        'THE WALLS BLEED'
      ];
      
      // Enhanced glitch effects
      function flashBackground() {
        // More intense color flashes with patterns
        overlay.style.backgroundColor = `rgb(${Math.random()*255}, ${Math.random()*50}, ${Math.random()*100})`;
        
        // Random chance for a more dramatic flash
        if (Math.random() < 0.3) {
          overlay.style.backgroundImage = `radial-gradient(circle, rgba(255,0,0,0.7) ${Math.random()*30}%, rgba(0,0,0,0.8) ${Math.random()*70 + 30}%)`;
        }
        
        setTimeout(() => {
          overlay.style.backgroundColor = '#000033';
          overlay.style.backgroundImage = 'none';
        }, 100);
      }
      
      function shakeText() {
        // More extreme text distortions
        const skewX = Math.random() * 20 - 10;
        const skewY = Math.random() * 20 - 10;
        const scale = 0.8 + Math.random() * 0.5;
        
        text.style.transform = `translate(${-50 + (Math.random()*20-10)}%, ${-50 + (Math.random()*20-10)}%) skew(${skewX}deg, ${skewY}deg) scale(${scale})`;
        text.style.color = Math.random() > 0.5 ? '#FF00FF' : '#00FFFF';
        text.style.letterSpacing = `${Math.random() * 10 - 5}px`;
        
        setTimeout(() => {
          text.style.transform = 'translate(-50%, -50%)';
          text.style.color = '#FF0000';
          text.style.letterSpacing = 'normal';
        }, 150);
      }
      
      function changeMessage() {
        text.textContent = glitchMessages[Math.floor(Math.random() * glitchMessages.length)];
        // Random chance to show backwards text
        if (Math.random() < 0.2) {
          text.style.transform += ' scaleX(-1)';
          setTimeout(() => {
            text.style.transform = 'translate(-50%, -50%)';
          }, 200);
        }
      }
      
      function addGlitchLine() {
        // Create horizontal static lines
        const lineHeight = Math.floor(Math.random() * 5) + 1;
        const yPos = Math.floor(Math.random() * 100);
        
        const line = document.createElement('div');
        line.style.position = 'absolute';
        line.style.left = '0';
        line.style.top = `${yPos}%`;
        line.style.width = '100%';
        line.style.height = `${lineHeight}px`;
        line.style.backgroundColor = Math.random() > 0.5 ? '#FFFFFF' : '#00FFFF';
        line.style.opacity = '0.7';
        line.style.zIndex = '10000';
        
        overlay.appendChild(line);
        
        setTimeout(() => {
          overlay.removeChild(line);
        }, 200);
      }
      
      function addStaticNoise() {
        // Add static noise overlay
        const noise = document.createElement('div');
        noise.style.position = 'absolute';
        noise.style.top = '0';
        noise.style.left = '0';
        noise.style.width = '100%';
        noise.style.height = '100%';
        noise.style.backgroundColor = 'transparent';
        noise.style.opacity = '0.1';
        noise.style.pointerEvents = 'none';
        
        // Create a stippled effect for "static"
        let stipple = '';
        for (let i = 0; i < 200; i++) {
          const size = Math.floor(Math.random() * 3) + 1;
          stipple += `${Math.random() * 100}% ${Math.random() * 100}% 0 ${size}px #FFFFFF, `;
        }
        stipple = stipple.slice(0, -2); // Remove trailing comma and space
        
        noise.style.boxShadow = stipple;
        overlay.appendChild(noise);
        
        setTimeout(() => {
          overlay.removeChild(noise);
        }, 150);
      }
      
      function flashSubtext() {
        // Create brief flashes of text at the bottom of the screen
        const subtext = document.createElement('div');
        const messages = [
          'it sees you', 
          'saving brain state', 
          'extracting memory', 
          'eyes open in the dark', 
          'nowhere to hide'
        ];
        
        subtext.textContent = messages[Math.floor(Math.random() * messages.length)];
        subtext.style.position = 'absolute';
        subtext.style.bottom = '10%';
        subtext.style.left = '50%';
        subtext.style.transform = 'translateX(-50%)';
        subtext.style.color = '#FF0000';
        subtext.style.fontSize = '1.2em';
        subtext.style.fontFamily = 'monospace';
        subtext.style.opacity = '0';
        subtext.style.transition = 'opacity 0.1s';
        
        overlay.appendChild(subtext);
        
        setTimeout(() => {
          subtext.style.opacity = '0.8';
          setTimeout(() => {
            subtext.style.opacity = '0';
            setTimeout(() => {
              overlay.removeChild(subtext);
            }, 100);
          }, 200);
        }, 20);
      }
      
      // Run effects at random intervals with more variety
      const effects = [
        {fn: flashBackground, weight: 3},
        {fn: shakeText, weight: 3},
        {fn: changeMessage, weight: 2},
        {fn: addGlitchLine, weight: 4}, 
        {fn: addStaticNoise, weight: 2},
        {fn: flashSubtext, weight: 1}
      ];
      
      let effectInterval = setInterval(() => {
        // Create a weighted selection system
        const weightedEffects = [];
        for (const effect of effects) {
          for (let i = 0; i < effect.weight; i++) {
            weightedEffects.push(effect.fn);
          }
        }
        
        // Run 1-4 random effects
        const numEffects = Math.floor(Math.random() * 4) + 1;
        for (let i = 0; i < numEffects; i++) {
          const randomIndex = Math.floor(Math.random() * weightedEffects.length);
          const randomEffect = weightedEffects[randomIndex];
          randomEffect();
        }
      }, 120);
      
      // After 5 seconds, trigger the player death
      setTimeout(() => {
        clearInterval(effectInterval);
        
      // Code to run terminal event
        if (typeof playerDied === 'function') {
          playerDied("FATAL ERROR: CONSUMED BY THE DARKNESS OF AZURE COVE", "existential_error");
        } else {
          // Alternative method for SugarCube - this executes the macro directly
          Engine.play("Death"); // Assuming you have a passage named "Death"
          // Or you could try:
          // SugarCube.Macro.getValue("run playerDied(\"FATAL ERROR\")");
        }
        
        // Clean up our overlay after a short delay
        setTimeout(() => {
          if (document.body.contains(overlay)) {
            document.body.removeChild(overlay);
          }
        }, 500);
      }, 5000);
    <</script>>
  </div>
</div>


:: final.history {"position":"700,125","size":"100,100"}
“This place could become a new sort of haven for you lot. Why not… Shellhaven?” 

Everyone who had turned around, noticed that the voice and their person had vanished. 

Were they ever there to begin with? No records say anything… except that it was named by the Catholics. 

And the Catholic records seem to say that it was a phantasmal person, one only the archbishop had seen, that said the name before disappearing. And so the Catholics made this town a new Diocese of Azure Cove, and called it Shellhaven. It stayed catholic too, for over a century, even hosted a Jesuit university—that was up until the all the “bad priests” were found guilty of committing their own accusations, and then the Catholics and its diocese were driven out to Biloxi.

Now, the whole of Shellhaven and its intangible history lies almost as stagnant as the swampy mire where it resides.

<<run markPathCompleted("A look at their history")>>
[[head back|Start]]


:: firstletter {"position":"575,625","size":"100,100"}
You find a letter barely sticking out of a post office box, its paper flapping in the lulling wind.

<<letter>>
To the author, 

I am only a couple of pages into this essay and already, I feel that the message so far has affected me in such a visceral way. 

The days have seemed to blend together for so long. For a while, I self-medicated using nothing but mushrooms, that I would microdose every few days. Life seemed to become greatly enhanced for a bit. Until I would walk into the office of my new job. 

The boss would call us in for our daily “quickfire learning hour.” Everyone would have to sit down in those uncomfortable fucking metal folding chairs. They literally told you “your job is to become me…” and that me was a you… that was taught by a me. The big boss would let the me’s teach. Then he would come and before he gave his fifteen minute devotional, he would pull out his phone and purchase a bright green pair of tennis shoes, because of how much its value would increase. “It’s a limited edition.” 

And then the preacher would come out for the devotional, and he would preach about profit, and how to get to his level of profit. He preaches this theology of how to prey on people's feelings in order to gain big profits. Of gumballs in a gumball machine, and how those people the gumballs were… 

And when I quit two days into the job, the boss looked at me, and said, “What do you want to do? What is your goal?” 

And I sat saying, “what does it matter?” 

He said, “you’re quitting… humor me.” 

And I said, “I want to try to do some type of psychology that involves plant medicine.” 
And he say’s, “I am from California, I know about that. How are you gonna pay for it? You need money, you need to get money. You just told me you were struggling and then you say this, so, what are trying to do with your life man?” 

He sat at his little desk surrounded by comforting things, and I say, “I’m not preying on people who are also struggling.” 

And then he looks at me angrily and says, “Ok. Hand in your lanyard.” 

I’m tired author. I’m tired. I want… no… I need… some type of release.

Sincerely, 
A Young Dreamer
<</letter>>


:: floating rite {"position":"475,1775","size":"100,100"}
I loaded up the last dinghy to begin our journey to the fingernail moon. 

A strange thought came to me. 

The fingernail moon was almost always there. How had I just noticed that? This was clearly unnatural.

PRETERNATURAL. A small voice in my head said. 

This was clearly preternatural. I was in for something really interesting, these rites... would actually mean more than I suspected.

Father Mercurius and Pié got into the boat, and some of the Moonlighters pushed our boat out to the shore. 

We had paddled for a good ten minutes when we finally reached the point in the fingernail. A new set of strange feelings shook my body... I saw Pié shaking as well.

Then I felt it. Something... some kind of aquatic creature... emerging from the bottomless depths below. 

I had to fight the fear that something biblical was about to swallow us whole. But the closer it got to the surface of the water - the stronger I felt these feelings.

Until, finally--I saw something large and humanoid in stature, with bright green and glowing eyes and a keratin beak, almost at the break.

It was near the border, and [[it was mad]] and wild and evil.


:: it was mad {"position":"475,1650","size":"100,100"}
I saw Father Mercurius say what seemed to be a curse to the wind. A puff of purple smoke seemed to come out of his big mouth as he spoke.

I stood, now paralyzed. The nerve agent had paralyzed me, the creature, and Pié. 
Father Mercurius took out a large and long metal gun-like device and fired it. 

The creature was struck with a harpoon and screamed a queer cry of terror. The scream sounded watery, a screech reminiscent of a coyote. It ended with a thick, blubbering gargle. The three bound souls went limp, and I heard Father Mercurius load the creature onto the dinghy.

I could see the creature in full now that it was face to face with me.

It was almost as long as the boat, over 7 feet tall...

Its entire body was like a squid's thin mantle, except for the large beak in the middle of its trunk...

It was barely breathing, and you could see that its mantle skin was squeezing its organs with each struggling breath.

The hot green eyes were wide open and staring at me. 

They were filled with an almost radioactive cloudy substance. A kind of liquid sloshing around in a slowly drying panic. 

Father Mercurius had put the smallest amount of water in the boat, enough to almost cover one of the creature's gills. It had legs like a human, but no other prominent human extremities... [[just the shape]].


:: just the shape {"position":"475,1525","size":"100,100"}
When we finally reached the shore back on Deer Island, some of the other Moonlighters had just started the campfire.

Father took me to a chair on the northernmost side of the fire. He placed Pié to the east and then the creature to the south, closest to the shore. Then he sat in the west and looked to the east.

He spoke some words in a strange language I had never heard before.

<blockquote>Tuma esaki e almanan aki i meskla nan pa semper. Laga e sakrifisio di kada un ta un prueba di nos sirbishi humilde.</blockquote>

Suddenly I saw my own soul... burst out of my chest in a flash of light and fly straight up.
This was no trick. This was no strange projection.

My own essence, a corporeal form that seemed to be made of pure photons and energy.

The energetic scattering of my separation created a great sonic boom for miles around. 

Reports from MUSCAT also showed a strange increase in atmospheric conditions this evening...

Then, with another great roar - the creature's soul separated. 

The static energy all around made everyone's hair stand on end. A feeling of nervous excitement spread through each of the Moonlighters who were still tirelessly chanting the Gayatri mantra. 

The creature's soul flew up in a flash of green flames and hovered in front of mine for a brief moment. I watched my essence floating in the sky, unable to move or speak. 

I felt no fear, only a [[sick curiosity]].


:: kept walking forward {"position":"225,1400","size":"100,100"}
I followed the trail of music.

After a few minutes of walking in the warm, humid light of the night, I stopped in shock. First, I saw a large horde of people, perhaps forty or more...all surrounding a towering and handsome older black gentleman wearing a silk tuxedo vest. He was beyond chiseled and wore a long set of dark brown curls that went down his back and chest for what seemed like miles... and he topped it off with a royal purple silk opera hat.

He was sitting in a big chair made of recycled trash from the beach, playing a guitar - smiling, with a big, insatiable, ivory-colored grin.

I felt a tug on my body, as if hundreds of small hands had grabbed me from behind, pulling me forward in excitement. 

There was a feeling of loneliness, though it was hurried, with the touch of these hundred invisible hands. Not like vectors, quite different. 

Gentle, guiding. A bunch of loving hands that meant very well... very well.

The touch of these hands also caused a flash in my eyes. 

I was given the memories of everyone here. Of the kind hand, of this titanic man... 

I noticed the generosity of this figure. He was always there to guide and support and cry and surprise. Always providing for his Moonlighters, for all their wants and needs.

In return, they gave a piece of themselves to the deep blue and came back different, better. 

More than I had ever known. I wanted this. I had spent enough days in my room crying about men. About the stress of a dead-end job I absolutely hated. 

I wanted this. I wanted so badly to be in control of my life. I needed to be in control of my life.

I was new to the whole idea of what people might consider pagan - I was raised a Tibetan Buddhist, and while there were some old folk beliefs... they weren't as well known or common. 

I could say I'm still Buddhist, it's really not a closed belief system at all...quite progressive actually. Most Dharmic beliefs are. 

Except for the more conservative old people, but I mean... extremism is everywhere, right? 

Especially now, in the 2020s.

Anyway, this whole pagan thing is new to me...so it was like, different...but it's not some evil occult thing.

I was welcomed with open arms the first night. [[Everybody is!]]


:: next channel {"position":"475,1200","size":"100,100"}
This time the person is more stocky, with a big red beard and puffy curly hair. The person is lying in bed and is shaking. A kind of mist appears and moves through the dream. At first it is dark, then someone rips off the blindfold. A young white man, speaking in a European language, appears to be tied to a pole in a canvas tent. The men, dressed in green outfits with silver trim and a lightning bolt on the shoulder, have stripped him naked and begin pointing at other men. 

The language is loud and unpleasant, and you watch as one of the men in green forces another stripped man onto the bound one. The man forces him to his knees and pushes the man forward. A man in a mask and white coat has begun to sew the man's mouth onto the other man. The sound of choking and screaming is muffled by the man on the bar. Then the dream jumps to two other men, their bodies joined in a human centipede and lying on a table. 

Several of the men in green look at the creation in disgust before one of them pulls out a strange looking whip. The whip handle is a silver-colored 10 inch metal pipe. The slightly curved pipe has a raised band with two small holes around the bottom end and an unevenly cut top end. Both ends of a 14-inch loop of black, flexible, ringed metal cable are threaded through the cut end, stopping near the band. One end is secured with a flanged mental stopper. The pipe has remnants of yellow, red, and white paint. 

The man pulls his hand back and another dream appears. 

This time, several of the stripped men are being pushed into a large canvas square. A sound of liquid rattles through some pipes around them, then the liquid pours down. All of the men stand in horror as their bodies melt to the ground. 

The person in the bed is startled awake, and then you see a book that says "[[Wendel's Dream Journal]]".


:: p1.avts {"position":"1250,1850","size":"100,100"}
Shellhaven, in Mississippi, is smack dab in the middle of that belt… but, yet, it’s not either. Even though it has people, some could say glampires, that wake up and rise out of their beds like every other person in every other city. Don’t think them less for not getting up much, during the day… The atmosphere had become to toxic for most people during the daytime, and unless you were in that weird place called the stacks, you were still… human… and just like any other “humans”, these folks had shit to do—ain’t no use in sitting around!

And often, while the people arose, two young teens would run off into the distance—towards a large wood that, once traversed, led straight to highway 90. But still, it is weird… because though the boys have lived in this area of Mississippi their whole life—

Shellhaven or the regions Azure Cove never existed. And yet, they do… have a whole regional history and all. The two boys are there, and they remember learning about the region in their homeschool co-op… They know that they are there. Azure Cove is there—but it’s not there either. Make sense of that. It’s fucking hard. There is a way you can try to find it, though… them…. You would just need to make your way Down South, then see if you can find them… or if it will let you find them.

[[next|p2.avts]]


:: p1.history {"position":"825,0","size":"100,100"}
At the time, this land seemed to be going through many trials and errors of settlement. For most of the time, until the mid to late 18th century, it was truly thought to be just a strangely barren piece of land, as no colony lasted, or they left and never spoke of the land again. There was large fight about who owned certain parts of the whole of the Territory of Mississippi. Over the next few decades, the place even tried to host a number of plantations, though none of them ever lasted. No one was able to explain it, and so the area was left alone and a large forest grew and the rest of it was left alone and so came the next strand of reality; the enigmatic, more unknown part of history. 

Around 1800, a small outpost was built near what would become the waterway of Old Fort Bayou, but as always the areas were abandoned. Due to the harassment of another, long distant relative of the local native Biloxi people. The Bayogoulan people fleeing the Louisiana Territory decided to stop at a small stretch of land, just north of a large swampy bayou, leading into the bay. They  found trace evidence of previous tribes here, when they found the remains of a platform mound. Now littered with semi-broken down structures, results of centuries of hurricanes and other storms plowing down the surrounding villages.

Strangely though, in that short span of time of travel, a couple of months at least, some of the Bayougoulans had been effectively proselytized by a group of Catholics heading west through the parishes of Louisiana and into the Republic of Texas. They decided to stay, instead of following the pioneers. For they too, sought to establish their own sort of community under their new God's grace. 

[[next|p2.history]]


:: p10.avts {"position":"1500,1975","size":"100,100"}
"You know who I love?" Dick said.

"Who?" Chuck replied, half coughing.

"Elizabeth Taylor...she's such an icon!"

"Wh-" he hacks. "Who?"

"You know, Elizabeth Taylor? Cleopatra? Cat on a Hot Tin Roof? Who's Afraid of Virginia Woolf? Beautiful lips and medium-length hair. Italian cut. Crop cut." Dick grabs a small canister and a balloon.

[[next|p11.avts]]


:: p10.history {"position":"950,250","size":"100,100"}
She returned to humanity and began to speak in plain English:

<blockquote>7. And I heard the altar answer: "Yes, Lord God Almighty, true and righteous are Your judgments."

8. The fourth angel poured out his bowl on the sun, and the sun was allowed to scorch men with fire. 

9. They were scorched by the intense heat, and they cursed the name of God who had control over these plagues, but they refused to repent and glorify Him.</blockquote>

The room filled with fire, and a sudden glow appeared around some of the Holywildists. Those who continued to sing, were covered as they sung; but those who ran died instantly.

[[next|p11.history]]

[[run|running death scene]]


:: p11.avts {"position":"1375,1975","size":"100,100"}
“The ffuuck you talking about, man?"

"I don't know." He cracks the little top off the canister and makes a pouring motion into the balloon, immediately bringing it to his flaking lips and inhaling. "I just... I feel like if I were a woman, I would want to be like Elizabeth Taylor. I already have that kind of structure." He rubbed his oval face and stroked his lips. There was a tingling sensation all around. He would never tell anyone this, but he actually lined his lips to match the kind of heart-shaped lips, she had. "I even have her eyes." He really did—almond-shaped and purple. Naturally purple. He loved his beauty, reveled in it. He spent hours looking at himself in the mirror.

“Sound like a fucking…”

"It's not our place to say that word." Dick said, cutting him off. 

[[next|p12.avts]]


:: p11.history {"position":"950,125","size":"100,100"}
<blockquote>10. The fifth angel poured out his bowl on the throne of the beast, and his kingdom was plunged into darkness. People gnawed their tongues in agony 

11. and cursed the God of heaven because of their pains and their sores, but they refused to repent of what they had done.</blockquote>

When the room went dark, everyone panicked and ran to the only source of light. A big pillar in the middle of the room. 

<span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span> had another trick up her sleeve. When the people reached the center of the room, the pillar formed a dome. The Holywildists had succeeded in their mission to bring her down to earth, causing her to return to human form, for some time. 

But she had not lost all of her power.  She trapped all the cultists in a bubble and harvested the harmony from their bodies. 

Soon, the entire cult would be gone. 

[[next|p12.history]]



:: p12.avts {"position":"1250,1975","size":"100,100"}
Even though Dick might have felt a little different, he might have fit that word exactly. But it is not right for a man like him to be like that, and it is not right for someone to use such a foul word. He didn't know why, but suddenly he felt very uncomfortable, so he went home and hid in the closet, in the corner of the little corner room in their double-wide.

<<run markPathCompleted("Wanna learn about the South..?")>>
[[head back|Start]]


:: p12.history {"position":"825,125","size":"100,100"}
Soon, a group of Roman Catholics would arrive in the profaned village, having started a dramatic battle that the Holywildists were completely unaware of. And call it so. And lock it up and damn it. 

Soon a whole new era will begin, an era of magic and gods and aliens and extremist religions and racism. But first, the Catholics have to make all that go away, and make all of what people these had begun calling Azure Cove into something not so... Satanic? They weren't sure what to call it. They knew the best way to erase the history is start a city. The new dilemma was a name for the town… a voice… someone way in the back of the crowds that had gathered round the mob… in a black trench coat, and a large black hat, rimmed with crystals, said in a ringing <span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">voice</span> as clear as diamonds.

[[next|final.history]]


:: p2.avts {"position":"1125,1850","size":"100,100"}
In the off chance that you do make your way Down South and happen to be passing through that gap of Hwy 90, and you get so lucky as to really see Shellhaven… well, you would see that almost all the roads are broken and direly need repaving. The facades all around; in shambles or covered by vines. You would see that nature is a fierce opponent and that this village was no longer fighting back. It was a reverse desert. The town itself knew it, the people in the town knew it… in fact in the early 2000s, they had to shutter all the Walmart’s and Fred’s in the seedy little Southeastern pueblo. That and basically any store over 1000 square feet. 

If that’s hard to imagine—think of half a tennis court or a two and a half car garage. Or for those unwealthy, another way of looking at it is the size of a corner store parking lot… or a large outdoor bus stop, for something like city transit or Greyhound. Anything larger than these sizes lacked security and were prone to the systemic flaws that were ‘exclusive’ to any of the seedy towns that makes people remark:

Don’t go down there… unless, you really have to… and even then, always watch your twelve!

In those kinds of stores or large facilities—the people who liked to get high on the store brand air-duster canisters could do so; without fear of being caught. 
Then they could go around and steal all the stuff they wanted, putting all of it in their large letterman jackets that they still wear from playing JV Football twenty years ago, and teach that to their kids. Their kids who are also playing JV football at the same school—the shittiest school in the county. 

[[next|p3.avts]]


:: p2.history {"position":"700,0","size":"100,100"}
They were very quick to take this strange new religion, full of mysteries and the unknown parts of a singular something. It was different, and not just their own interpretations of the “divineness” of nature. They spread across the whole of an expanse somewhere east of the Louisiana Purchase on a small lake, a bit back from waters edge. They founded this small village of sorts and called it the Holywild. The Bayougoulans had taken the old wooden buildings left abandoned all around the platform mound and completely rebuilt them: several smaller lodges for dormitory purposes, a pseudo-cloister, a refectory, a chapter house, a large cemetery, and an oddly shaped church—almost a pyramid.

The Holywild was a creative effort, a kind of rebuilding of their entire lives and beliefs. They had heard stories upon stories of miracles in the church and how God blessed Catholics, and they sought miracles of their own. Little did they know that their mustard seed faith was just enough for another God to connect with them. Not the eternal YHWH, but a great and tentacled storm.

The deity had taken up a bit of space, a place stuck in the gears of time, just off the coast of Ilé du Massacre.

[[next|p3.history]]


:: p2.mdsr {"position":"1250,375","size":"100,100"}
Y'all... some weird shit been happening... I found Pop's old tape recorder in a box of shit I brought from the quarters, so I left it recording and tryin' to tell y'all what's goin' on...

It feels like it all started the moment I popped the psychobilly mixtape into my Sony Walkman and heard old Kim Nekroman crooning, "WHO KILLED THE CHEERLEADER? "You did, you did!" I said.

I took a step up the little metal folding stairs of my trailer. Out into the harsh sunlight of the Cove. 

[[next|p3.mdsr]]



:: p2.tob {"position":"1550,25","size":"100,100"}
I was writing about dogs and how beautiful my dog Fifi was, or was it Fluffie? That shit was just baby me… well, you’d probably think that was true. What if I told you I was a little deviant… what if? You would really think I would have almost finished something. 

Five stories in the can, well, uh... Scriveners… and some of them have been stewing for, what, ten… fifteen years? What is the point of finishing them right? I aim for some philosophical perspective and I go hard for about a week… and then I forget about it for four weeks…

<<lux>>a month. Why didn’t you just say a month?<</lux>>

The cycle repeats like some karma wheel. I get depressed for about a week. I sink myself into my faith the second week. I feel a little better in the third week, and start working on a new project. That inspires me to continue the old project, and then I do the whole thing over again--

<<lux>>And then you do the whole thing over again. Over and over and over and over…<</lux>>

again the days appear to merge collectively until I feel numb again and then, and then the depression…

[[next|p3.tob]]



:: p3.avts {"position":"1125,1975","size":"100,100"}
But, hey, that’s life here in the South - hold tight to your friends waist on that 4-wheeler as you plow through a mud pit under the power lines, and try not to think about how homoerotic it feels.

Most of the owners wouldn't have minded keeping the stores open a little longer, it kept the Dollar General seeds from sprouting overnight, and people liked to have some other places to go. Well they didn’t mind until they found four dead teenagers in the bathroom, hocked up on paint thinner. That’s when they finally had enough.
And a lot of these towns were known for being butt-fucked-Egypts; stranded electronically and cellularly from civilization. Though Shellhaven was lucky, something weird was going on in that town that required a need for some type of satellite-phones. They were these weird proprietary phones that only called each other, that showed up on shelves all around the place. Printed signs hung around the phones saying:

Unfortunately there is no actual policing in the town of Shellhaven, if you have to report something, please use a Luxdroid phone and dial 31*. 

Most of the owners were just given these phones by men in highlighter suits, and no one knew what the fuck they were about. They were just elated to be able to communicate over cellphones, even if they were these weird clunky blocks. The owner that found the dead teens, dialed 31* and placed a call. The voice on the other end said, “Maurepas Security, where is the location of your emergency?” He told Them. 

And then They, whoever They are, took the teens away; in a big, reflective yellow-striped white van that had about six shelves for holding bodies. Unfortunately, the bottom two racks were already filled after a shootout in a north side neighborhood left two brothers dead. But hey!!! 

[[next|p4.avts]]


:: p3.history {"position":"575,0","size":"100,100"}
He took these Holywildists and molded them into perfect acolytes. The buildings they built, the things they wrote, the sculptures they carved. It was just as this deity had planned. 

They would sit for hours taking large river stones, from a creek way up north, called Okatoma. They would sit and start carving strange runes on the face. They would take the stones and line the streets with them, placing them all around this strange priory. They feet soon walked on cobblestone ground, made of smooth river rocks. Whole tomes could be under their feet and most would be none the wiser. They simply sat and carved out because they felt a calling. They knew it was needed and so they fulfilled that need. Everyone was happy and peace abounded, save for one member, who truly saw their Catholic Christian faith as the only way. They became quite unnerved by the profanity of the "cult" and attempted to leave. This person died shortly thereafter. His face and eyes were swollen and his sclera were blood red. No one was sure what had happened. 

There was one certainty. Strong feelings, profane feelings - almost prophecies - they all received, telling them to banish something. Someone, a woman named <span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span>.

[[next|p4.history]]


:: p3.mdsr {"position":"1125,375","size":"100,100"}
Trailer parks are a little different since President Gore took office. He gave us poor folks something called the Earned Income Tax Credit - basically, if we make below a certain amount, they uh... replace our income during tax refund season.

A lot of us used that money to get us better and newer trailers - from the inherited shitholes we lived in deep in the Quarters... to a less shitty trailer park on the edge 
of the Quarters - closer to Shellhaven.

You see, we got that money once in 2001 - but never again. Some of us got our annual income tax refunds, at least those of us who live with kids.

[[next|p4.mdsr]]


:: p3.tob {"position":"1675,25","size":"100,100"}
I stare up at the ceiling… the clock above my head ticks at 4:19. 

Something weird happens. 

You know how the clocks colon will like, blink, marking seconds??? 

What if I told you it wasn't blinking? 

I’ve been counting inside of my head for about 90 seconds now, so I know I am not mad. 

The clock hasn’t advanced.

I have been holding my blunt in my right hand the whole time… 

This that <<footnote "preem">>This streetslang term is from the Cyberpunk RED and 2077 Universe. It means dope or cool, comes from premium, you scrubs.<</footnote>> fuckin’ shit… 

And I got a little DMT loaded into a vaporizer in my left hand. I am about to fucking blast off man. 

[[next|p4.tob]]



:: p4.avts {"position":"1125,2100","size":"100,100"}
That’s life Down South! The sounds of sirens flying by at midnight - were those gunshots or meth lab explosions? Maybe both? It sounds fucking harsh, but it's God's honest truth. 

You could be fighting with your best friends at knifepoint. Then, at the Wednesday night service, you ask your God and your best friend for forgiveness. They would forgive you, or so you think, until you do it again on Saturday afternoon after one too many lines and beers. Lather, rinse, repeat. Welcome to the great, old Down South!

[[next|p5.avts]]



:: p4.history {"position":"575,125","size":"100,100"}
<span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span> was a goddess, and she was not afraid of a lesser form. She too, found it easy to manipulate the manipulated. All it took to brainwash their tiny minds was for her to turn into a diamond - and suddenly their worship took on other elements. Tangible ones, their 'Magic Crystal of Power’, aptly named, all pressed carbon and glorious.

This diamond would be the epitome of their miracles, a physical and visual representation of what they craved. The one thing that could cement their faith beyond the powerful but abstract. And as the Holywildists grew, their dogma spread like lava to the other natives. The great god of the storms and his miracle crystal (diamond) that would grant those who connected to it and performed the appropriate ritual an incomprehensible power. Join them and their power would be almost as great as that of a god. Not so much to manipulate the threads of reality; more to manipulate the world a bit, to placate humanity and make them very suggestible. 

The Holywildists proselytized and gathered the number of proselytes needed to perform the banishment ritual. They were completely unaware that their miracle was the thing they were supposed to banish. The storm told them nothing—only giving them feelings, leadings to preparations.

[[next|p5.history]]



:: p4.mdsr {"position":"1125,250","size":"100,100"}
I's never been so lucky to call a woman mine for long, and she's all ways run off with my kids into bigger and better relationships-even now she's running, new camper and all.

Lord knows, it's been a rough couple of years... Al Gore did 'some' good, but since nonus never got that extra income again... most of us weren't able to afford maintenance upkeep-none 'cept the property managers anyway.

I say all this to say that what I am about to tell you is not just some redneck conspiracy theory.

It seems that some kind of apocalypse has broken out.

[[next|p5.mdsr]]



:: p4.tob {"position":"1675,150","size":"100,100"}
“FUUCCKKK THIS!” 

I look over to grab my light and see the clock on the nightstand. The fucker says 4:21. I look back up and the alarm clock above me is gone.

<<lux>>The lights begin to dim until the room is pitch black.<</lux>>

The lights fucking dim off, and suddenly, I hear a crackle, crackle, crackle, crack-

<<lux>>The lighter flicks on… and begins to float.<</lux>>

My light clicks on and the flame moves around. 

<<lux>>Crackle crack crack...<</lux>>

<<lux>>A hand extends with a spotlight shown on it.<</lux>>

Have I already took a hit off my?

The glowing hand holds my light, and I suddenly extend the blunt out.

[[next|p5.tob]]



:: p5.avts {"position":"1250,2100","size":"100,100"}
Down, where the pastors of the Churches of God have sons who start live streams on Luxbook—of them riding behind the church and shooting a pistol into the woods—screaming prophecies of the end times while probably loaded up on a ton of amphetamines. 

Where Sister Harley was seen in that seedy bar called "Emerald's Cove," but who saw her? Who knows? Maybe she went to check on another brother or sister of God. 

[[next|p6.avts]]



:: p5.history {"position":"575,250","size":"100,100"}
They spent a decade preparing and executing the ritual. They methodically tested the echoes of certain chants, fended off the attacks of lesser beings, and wrote rich histories of their religion, on page and on rock. They even created a Rosetta Stone of sorts to help people learn what they called "the honey of the gods.”

After fifteen years and a solid base of Holywildists, the rituals finally began. They began in the church.

The cantor began to sing:
M'RKATH'NEB DELA A O'PI VIS'ZURE 'ZURE DE'LA.
'ZURE 'ZURE, A'ZURE, A'ZURE DE'LA. 
DE'LA DE'LA DE'LA.

[[next|p6.history]]



:: p5.mdsr {"position":"1125,125","size":"100,100"}
It started near the edge of town when a weird meteorite-like thing came out of nowhere and fell right on top of the Crazy Korner gas station. 

It spewed out millions of flowers in a sort of mushroom cloud... and shot the gas pumps twenty feet away. It was scary, bizarre, weird...

Luckily, or unluckily, depending on who you are, Tropical Storm Bill is coming up the coast, so they turned off the gas pumps. 

No fireball in the sky... but there was this weird mushroom cloud made of flowers.

[[next|p6.mdsr]]


:: p5.tob {"position":"1675,275","size":"100,100"}
<<lux>>tHE IMAGE OF, IMAGE OF, IMAGE OF, IMAGE OF.

bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe, bLaCk AnD wHiTe.<</lux>>

<img src="https://static.wixstatic.com/media/f3adad_70a1743127264838bccb5b06113bd8f6~mv2.jpg" alt="Noisy, deep-fried, black and white image of face" style="max-width: 100%;">

[[next|p6.tob]]


:: p6.avts {"position":"1375,2100","size":"100,100"}
Down South!!! Where there was no peace for anyone who was different, because clearly God said to hate anything that was not the same as the Bible. At least that seems to be the case in Shellhaven, you know… probably not for most other places like that. 

In Shellhaven, no one would ever actually be ‘reading the Bible,’ most people had to listen to the Word. Simply for the fact, that most people couldn't read. And when they listened, they weren't even listening to the Bible itself… No! They were listening to commentaries on the Bible, human interpretations. Almost all of them went to church, drive a half-mile and you’ll see one. And yet, they sinned everyday, and everyday they went to their prayer closets and had a personal conversation with God and his son. Asking for all forgiveness, and then they would feel redeemed. They went to church, yes, but I wonder how many read the Bible or how many just gleamed what they wanted, after hearing something from a post on Luxbook or in some YouTubers commentary on verses.

That was one of the first steps where you could and would go wrong as a new Christian. Not going to an actual source of wisdom. In almost all cases, it is so much better to find interpretations, from several different sources close to you… rather than listening only to the commentary of one personally unknown person. Commentaries are complementary, just as workout supplements are complementary to working out. No one just gets good without first learning the right way to do it and then choosing the supplements that they want for what they want to achieve. 

[[next|p7.avts]]



:: p6.history {"position":"575,375","size":"100,100"}
Some of the members closer to the altar, held up their hands to the sky and begin to chant. A majority locked hands with one another, stretching through the pews and chairs and grounds of the chapel like a strange snake. Soon, the whole  church joined in, more than 200 voices in this desecrated building. The sounds went everywhere.


M'RKATH'NEB DELA A'ZURE, DELA O'PI ZURE DELA DELA A'ZURE ZURE' VIS'ZURE M'RKATH'NEBVIS'ZURE DELA DELA A A DELA M'RKATH'NEB 'ZURE DE'LA.

M'RKATH'NEB 'ZURE M'RKATH'NEB DELA 'ZURE, A'ZURE, 'ZURE 'ZURE 'ZURE A'ZURE DE'LA. 

DE'LA VIS'ZURE DE'LA M'RKATH'NEB DELA O'PI ZURE DE'LA.

[[next|p7.history]]



:: p6.mdsr {"position":"1250,125","size":"100,100"}
Nothing more happened for a couple of days, not until Bill made landfall.

I say...at that point I was and still am hooked on the "shake and bake" meth(od...) 

But, there are some things that meth just can't make you hallucinate and I don't think a gigantic mushroom cloud made of flowers is one of them.

I may have just lost track of time, but it feels like it's been two days... and now as I step out into the scorching sun... wait, there's supposed to be no sunlight. There 
was a storm outside just a few minutes ago. 

Then, from a distance above me-a distance I can't quite fathom-I hear a loud and deep sort of belch-like howl, three of them. Three big, proverbial belches, ending in a wobble and three long, shrill clicks - a giant dog clicker in the sky.

I could barely hear Nekromantix over the sound of that thing.

Then I saw them... the queerest, and not like gay, sight I've ever seen. 

[[next|p7.mdsr]]



:: p6.tob {"position":"1550,275","size":"100,100"}
This is the end of this section of the odd book...

[[keep reading|On society]]

[[head back|Start]]


:: p7.avts {"position":"1500,2100","size":"100,100"}
So in that concern, why is it most just blindly listen to some persons commentary instead of going to someone who has studied it directly? If you folks are in church every time the doors are open. Who’s stopping you? Remember what your Bible says:

“Prove all things; hold fast that which is good.”
Or…
“The simple believeth every word: but the prudent man looketh well to his going.”
(And in case you don’t know, “hold fast” means “hold tightly.” And “prudent” means “(to be) someone with good judgment.”)

The case should not be said of everyone… Take Dick and Chuck, who were not really churchgoers, but they at least did actually try to read the Bible. And from that, even they knew that the Bible left room for interpretation. They were acutely aware of what the Bible said, because according to most other conservative Christian beliefs, their family dynamic was a little less than savory. 

Their parents, and so them as well, followed Seventh-day Adventism. If you are unfamiliar with this philosophy, it is annihilationism—these beliefs are interesting. 

[[next|p8.avts]]


:: p7.history {"position":"700,375","size":"100,100"}
The earth began to rumble, strongly... <span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span> appeared before them.

Their chants grew stronger, all of them in the same tone and the same language.

'ZURE 'ZURE, A'ZURE, A'ZURE DE'LA. 

DE'LA DE'LA DE'LA.

'ZURE 'ZURE, A'ZURE, A'ZURE DE'LA. 

DE'LA DE'LA DE'LA.

[[next|p8.history]]


:: p7.mdsr {"position":"1375,125","size":"100,100"}
There's these zombie-like things, well, not zombies...but, there's these weird human-looking standing things. All covered in flowers and... now that could be the meth talking, but... like bloody looking hands? Yeah... they were reaching out and all wiggly and disgusting looking...

I ran back up the metal stairs, inside to grab my guns and load 'em - I heard some people outside shooting, so I know I'm not alone in my pursuit.

I kicked the door of the trailer open, who cares what's going on right now... F.E.M.A. will give me some money and a new one anyway. All ways loves to help the distressed and needy. When the door flung open, to my surprise, there was already one of those flower- JESUS FUCK... WHAT ARE THESE THINGS?

[[next|p8.mdsr]]



:: p8.avts {"position":"1625,2100","size":"100,100"}
See, instead of eternal damnation for sinners on earth and an eternal hell for sinners, they teach that hell and the angels and demons and ALL souls...will be destroyed, wiped out in an eternal fire. They would then all emerge renewed, living in a blissful afterlife. An afterlife that promises peace and unity once and for all. 

Yeah, this sounds all well and good. But unfortunately, as always is the case, this led to some intriguing groups making their own assumptions about Seventh-day Adventist dogma. They preached a diametrically opposed kind of philosophy that allowed some things that are not typically considered "normal" in our society, such as polygamy. One of these groups was the Branch Davidians, a highly unsavory and unstable sort of religious militia. But their family weren’t these sort of crazy extremist! No!

Dick and Chuck's parents were polygamists, but they weren't really believers, and they certainly weren't part of what the Branch Davidians now called The Branch! Nah! 

And though the two were not born into this polygamous form of Christianity—the families had their children long before they assumed their current status—it did not affect the children as much as people had hoped. It is interesting, because in fact, most children in these types of families tend to learn true acceptance at a much faster rate than children from Atomic families. The kids don't see polygamy as unusual, and unless they see otherwise (such as modeling bad behavior from other families), they often come to a quick and beautiful defense on behalf of their own. 

Their favorite point. Polygamy was in the Bible. Look at Solomon and David and most all the kings of God’s chosen, Israel. They were very modern children, accepting and loving… but for a while they were teenagers, and teenagers natural tendencies couldn’t be easily swayed. 

[[next|p9.avts]]


:: p8.history {"position":"825,375","size":"100,100"}
<span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span> looked around at them all, her body changed and grew and turned into a big hut with chicken legs. 

The chicken started laughing and running at them before shrinking back to human size. It jumped into the air, spun like a top, and then turned into a large mortar and pestle. It spun and it pounded the virgin pine floors until they cracked and bent and warped. 

The chanting grew louder and stronger, as if amplified by some thunderous, electrical force.

'ZURE 'ZURE, A'ZURE, A'ZURE DE'LA. 
DE'LA DE'LA DE'LA.
DE'LA DE'LA DE'LAAAAAAAAAAAAA—

They held this one until they could no longer exhale. 

[[next|p9.history]]



:: p8.mdsr {"position":"1375,250","size":"100,100"}
It's face is covered with a thousand eyes and it's body is covered with a thousand little hands - the rest of it's body was glowing and covered with strange wispy fire-looking dandelions... almost like little torches.

There was a sense of something dark and wrong about these things, I felt it...beings of hell. God would not have created something that looked so demonic - angels are cute babies, or handsome white men like me.

[[next|p9.mdsr]]



:: p9.avts {"position":"1625,1975","size":"100,100"}
For years, they rebelled and ran away after curfew, during homework time, or during teen services. They were some of the kids that would skip school and go to a Luxmart, in search of a laugh… They would sit, latex balloons in their cracked hands, huddled in the corner of the handicapped stall in the men's room in the back. 
Conversing.

[[next|p10.avts]]



:: p9.history {"position":"950,375","size":"100,100"}
The strange form rose, spun once more, and became that same great crystal of power.

This caused some of the Holywildists to lose control of their power, giving <span onclick="window.showZureDiamond()" style="color: #FFD700; text-shadow: 0 0 5px #FFD700, 0 0 10px #00FFFF; cursor: pointer;">Zure</span> some room to breathe.

[[next|p10.history]]



:: p9.mdsr {"position":"1250,250","size":"100,100"}
I shot the thing in the head...but it barely left a dent in its eyes. This looks to be the end... at least I get to die listening to my favorite song...

(He did, he did), 

Yeah right, 'cause she was having a ball...

She was having a ball-
She was having a ball-
She was having a ball-
She was having a ball...

<<run markPathCompleted("Micah D's Recording")>>
[[head back|Start]]


:: running death scene {"position":"825,250","size":"100,100"}



:: sick curiosity {"position":"350,1525","size":"100,100"}
The creature's soul stared, taking on a kind of control not seen in the almost theatrical experiences of most moonlighters.

The soul of the strangely defiled creature opened its head... 

A large set of thousands of teeth in a dark sort of gray flesh began to expand and appear in an inverted step pyramid, like Chichen Itza.

The sounds of the Gayatri mantra began to break, and people began to murmur in trembling fear.

I could barely see that the bodies of Pié and Father Mercurius were now in another strange paralysis. 

Their bodies were awkwardly displayed like the peaceful swastikas of most Dharmic cultures. Their eyes and mouths were wide open, and dark red light shone from them like ten thousand lux flashlights.

The sound of a roar came from the throat of the creature's soul. 

One effect of the Gayatri mantra is a supposed increase in the part of testosterone that makes you grow hair...

The Moonlighters noticed this as their arms, legs and head began to grow hair at a rapid rate.

Still my soul stood in deep amazement... I reached out my soul hand to the inverted pyramid and my entire soul was pulled in a geometric spiral directly into the mouth of the being.

In almost all past binding rites, the souls of the beings would willingly jump into the bodies of the supplicants.

[[I did this in reverse]].


:: slept {"position":"125,1225","size":"100,100"}
What is it that makes one dream? A passage from the University of Queensland says this:
<blockquote>Memories aren’t stored in just one part of the brain. Different types are stored across different, interconnected brain regions. For explicit memories – which are about events that happened to you (episodic), as well as general facts and information (semantic) – there are three important areas of the brain: the hippocampus, the neocortex and the amygdala. Implicit memories, such as motor memories, rely on the basal ganglia and cerebellum. Short-term working memory relies most heavily on the prefrontal cortex.</blockquote>

The Cove was different. A guy named Wendel Lux bought up a whole bunch of property all over town right before the second moon came and caused the analemmatic shift. He had predicted years before, right after Katrina, that there would be a major shift in the area. That a whole new dimension would displace itself from its home and end up in ours... but hide itself just enough that hardly anyone knew about it. In fact, if you were to look at a map, you would not see any kind of boundaries for a city called Shellhaven. Just a few apartment complexes between Ocean Springs and Gautier, and a community college. No semi-prestigious, who are we kidding, run-down university... no weird trailer park and no priory. Nothing to suggest that this place is real. But it is, real enough to suck the power out of the world and the people it has displaced. 

A large part of the power that feeds the Cove is the beliefs of the people there... and those beliefs are heavily influenced by the dreams that people have. The Cove has a way of making people dream things that are just real enough to scare you, but just fake enough to make it entertaining for others hiding their schadenfreude. So, in case you were wondering, that is the answer. The Cove has no connection to the outside world, so it creates entertainment for the people inside on a whim. The best way to do this is to broadcast the dreams of the inhabitants inside on channels it has created. The news even takes a strange turn, it is completely real, but the producers and actors are all fake. The people there manifested some people and they came to life, and their managers and producers and so on. The news channel had a nice younger white woman with bright purple hair and a young Mexican man with heterochromia iridum, one green and one pink. Is it what you think? Who knows...kind of morbid, but would the man go blind? 

In the evenings, when the channels were not mimicking the fake news on the real news outside, they showed reality television. Everyone's favorite, [[Alice's Wet Nightmares]]...


:: the odd book {"position":"1550,150","size":"100,100"}
<<malfunction>>I have been writing since I was like <span class="pulse-text">five.</span><</malfunction>>

<<distort>>Yes...<</distort>> That’s a really fucking early age to start a story. I mean, who does that? 

[[next|p2.tob]]



:: walked forward a few feet {"position":"350,1400","size":"100,100"}
I stepped out of my old Honda Civic onto the sandy asphalt. 

A slight crunching under my jet-black non-slip shoes was cut off as I stopped and began to hear the sounds of a guitar and perhaps a conga from a distance.

<span style="color: #FF00FF;">
I [[kept walking forward]]...

Went back to my car, drove home and [[slept]]
</span>


:: which was about to come... {"position":"225,1775","size":"100,100"}
It had begun with a long bout of unknown experiences, about two days before. They ranged from physical pain to emotional turmoil, like imagining the death of a loved one or feeling a physical tear in my heart whenever I thought too long about something that made me human.

Pié had tried to warn me a few days earlier with a cryptic message in a strangely formatted text... written like this: 

<blockquote>
Pié: The days of strife will soon be over for you.
---------| 	|---------
---------| 	|---------
 =  =  :  X  :  =  =   
---------| 	|---------
---------| 	|---------
</blockquote>

Like... what the fuck is that supposed to mean?

The feelings finally ended when I pulled into the parking lot at [[Plummer Point]].


:: StoryScript [script]
// Global state management
const glitchState = {
  timers: [],
  hiddenElements: {},
  capturedElements: {}
};

$(document).on(':passagestart', function() {
  // Set up glitches and persistent elements
  setupRandomGlitches();
  setupPersistentElements();
});

// Function to set up the random glitches
function setupRandomGlitches() {
  // Clear existing glitch timers to prevent duplicates
  glitchState.timers.forEach(timer => clearTimeout(timer));
  glitchState.timers = [];
  
  // Set up random minor glitches (less frequent)
  for (let i = 0; i < 5; i++) {
    // Random timing between 18-26 seconds
    const glitchTime = Math.random() * 8000 + 18000;
    const timer = setTimeout(() => {
      triggerMinorGlitch();
      // Schedule the next glitch
      setupRandomGlitches();
    }, glitchTime);
    glitchState.timers.push(timer);
  }
  
  // Set up random major blackout glitches (even less frequent)
  const blackoutTime = Math.random() * 40000 + 30000; // 30-70 seconds
  const blackoutTimer = setTimeout(triggerBlackoutGlitch, blackoutTime);
  glitchState.timers.push(blackoutTimer);
}

// Function to trigger minor glitches
function triggerMinorGlitch() {
  // Pick a random glitch type from 0-6
  const glitchType = Math.floor(Math.random() * 7);
  
  // Apply different effects based on random selection
  switch(glitchType) {
    case 0: // Color shift
      createTemporaryOverlay({
        'background-color': 'rgba(255, 0, 255, 0.2)',
        'mix-blend-mode': 'exclusion'
      }, 200);
      break;
      
    case 1: // Horizontal shift
      animateStory([
        { transform: 'translateX(5px)', duration: 100 },
        { transform: 'translateX(-8px)', duration: 100 },
        { transform: 'translateX(0)', duration: 100 }
      ]);
      break;
      
    case 2: // Text garble
      garbleText();
      break;
      
    case 3: // Scan lines
      createTemporaryOverlay({
        'background': 'repeating-linear-gradient(0deg, rgba(0, 255, 255, 0.2), rgba(0, 255, 255, 0.2) 2px, transparent 2px, transparent 4px)',
        'opacity': '0.7'
      }, 400);
      break;
      
    case 4: // Flicker
      flickerOverlay();
      break;
      
    case 5: // System message
      showSystemMessage();
      break;
      
    case 6: // Digital noise
      createNoiseOverlay();
      break;
  }
}

// Helper function to create temporary overlay with given styles
function createTemporaryOverlay(styles, duration) {
  const glitchElement = $('<div id="minor-glitch"></div>').css({
    'position': 'fixed',
    'top': '0',
    'left': '0',
    'width': '100%',
    'height': '100%',
    'pointer-events': 'none',
    'z-index': '9000',
    ...styles
  });
  
  $('body').append(glitchElement);
  setTimeout(() => glitchElement.remove(), duration);
}

// Helper function to animate the story element
function animateStory(steps) {
  const story = $('#story');
  let delay = 0;
  
  steps.forEach(step => {
    setTimeout(() => {
      story.css({
        'transform': step.transform,
        'transition': 'transform 0.05s'
      });
    }, delay);
    delay += step.duration;
  });
}

// Function to garble text
function garbleText() {
  const textElements = $('.passage p, .passage span, .passage div:not(.banner-container-1):not(.banner-container-2)');
  const originalTexts = [];
  
  // Store original text content and create garbled versions
  textElements.each(function(index) {
    const $this = $(this);
    originalTexts[index] = $this.html();
    
    // Only garble some text elements (random selection)
    if (Math.random() < 0.3) {
      const garbledText = originalTexts[index].split('').map(char => {
        return Math.random() < 0.1 ? 
          String.fromCharCode(Math.floor(Math.random() * 26) + 97) : char;
      }).join('');
      
      $this.html(garbledText);
    }
  });
  
  // Restore original text after delay
  setTimeout(() => {
    textElements.each(function(index) {
      $(this).html(originalTexts[index]);
    });
  }, 300);
}

// Function to create flicker effect
function flickerOverlay() {
  const overlay = createTemporaryOverlay({
    'background-color': 'rgba(0, 0, 0, 0.8)'
  }, 200);
  
  setTimeout(() => overlay.css('background-color', 'rgba(0, 0, 0, 0)'), 50);
  setTimeout(() => overlay.css('background-color', 'rgba(0, 0, 0, 0.8)'), 100);
  setTimeout(() => overlay.css('background-color', 'rgba(0, 0, 0, 0)'), 150);
}

// Function to show system message
function showSystemMessage() {
  const messages = [
    "SIGNAL INTERFERENCE DETECTED",
    "RECALIBRATING DIMENSIONAL PARAMETERS",
    "M'RKATH'NEB ENERGY SIGNATURE DETECTED",
    "REALITY ANCHOR DESTABILIZING",
    "EXISTENTIAL KNOT TIGHTENING",
    "DIMENSIONAL BREACH IMMINENT",
    "THE STACKS EXPANDING"
  ];
  
  const overlay = createTemporaryOverlay({
    'display': 'flex',
    'justify-content': 'center',
    'align-items': 'center',
    'color': '#00FFFF',
    'font-family': 'monospace',
    'font-size': '16px',
    'text-shadow': '0 0 5px #00FFFF'
  }, 800);
  
  overlay.text(messages[Math.floor(Math.random() * messages.length)]);
}

// Function to create digital noise overlay
function createNoiseOverlay() {
  const noiseCanvas = document.createElement('canvas');
  noiseCanvas.width = window.innerWidth;
  noiseCanvas.height = window.innerHeight;
  const ctx = noiseCanvas.getContext('2d');
  
  // Create digital noise more efficiently
  const imageData = ctx.createImageData(noiseCanvas.width, noiseCanvas.height);
  const data = imageData.data;
  const length = data.length;
  
  for (let i = 0; i < length; i += 4) {
    const value = Math.random() < 0.1 ? 255 : 0;
    data[i] = Math.random() < 0.2 ? 0 : value;     // R
    data[i+1] = Math.random() < 0.2 ? 255 : value; // G
    data[i+2] = Math.random() < 0.2 ? 255 : 0;     // B
    data[i+3] = Math.random() < 0.3 ? 100 : 20;    // A
  }
  
  ctx.putImageData(imageData, 0, 0);
  
  createTemporaryOverlay({
    'background-image': 'url(' + noiseCanvas.toDataURL() + ')',
    'opacity': '0.3',
    'mix-blend-mode': 'overlay'
  }, 300);
}

// Function to trigger major blackout glitch with sequence
function triggerBlackoutGlitch() {
  // Create blackout overlay
  const blackout = $('<div id="blackout-glitch"></div>').css({
    'position': 'fixed',
    'top': '0',
    'left': '0',
    'width': '100%',
    'height': '100%',
    'background-color': '#000',
    'z-index': '9999',
    'display': 'flex',
    'justify-content': 'center',
    'align-items': 'center',
    'color': '#00FF00',
    'font-family': 'monospace',
    'font-size': '24px',
    'opacity': '0',
    'transition': 'opacity 0.2s',
    'text-align': 'center',
    'pointer-events': 'none'
  });
  
  $('body').append(blackout);
  
  // Blackout sequence with messages
  const sequence = [
    { time: 50, action: () => blackout.css('opacity', '1') },
    { time: 500, action: () => blackout.text('SIGNAL LOST') },
    { time: 1500, action: () => blackout.text('') },
    { time: 4000, action: () => blackout.text('ATTEMPTING TO RECONNECT...') },
    { time: 5500, action: () => blackout.text('DIMENSIONAL ALIGNMENT FAILED') },
    { time: 7000, action: () => blackout.text('RECALIBRATING REALITY PARAMETERS') },
    { time: 8500, action: () => {
      blackout.css({
        'background': 'repeating-linear-gradient(0deg, rgba(0, 0, 0, 0.97), rgba(0, 0, 0, 0.97) 2px, rgba(0, 0, 0, 0.8) 2px, rgba(0, 0, 0, 0.8) 4px)',
        'color': '#00FFFF'
      });
      blackout.text('SIGNAL INTERFERENCE DETECTED');
    }},
    { time: 10000, action: () => blackout.text('CONNECTION REESTABLISHED') },
    { time: 11000, action: () => {
      blackout.css({
        'opacity': '0',
        'transition': 'opacity 1s'
      });
      setTimeout(() => blackout.remove(), 1000);
      
      // Schedule next blackout
      const nextBlackout = Math.random() * 40000 + 30000; // 30-70 seconds
      const timer = setTimeout(triggerBlackoutGlitch, nextBlackout);
      glitchState.timers.push(timer);
    }}
  ];
  
  // Execute sequence
  sequence.forEach(step => {
    setTimeout(step.action, step.time);
  });
}

// Function to set up persistent elements
function setupPersistentElements() {
  createAuthorButton();
  createBanners();
}

// Helper function to create author's note button
function createAuthorButton() {
  if ($('#author-note-button').length === 0) {
    const authorButton = $('<div id="author-note-button">Author\'s Note</div>').css({
      'position': 'fixed',
      'bottom': '90px',
      'right': '20px',
      'background-color': '#00FFFF',
      'color': '#000033',
      'padding': '8px 15px',
      'border': '2px solid #FF00FF',
      'border-radius': '5px',
      'font-family': 'Courier New, monospace',
      'font-weight': 'bold',
      'cursor': 'pointer',
      'z-index': '1000',
      'box-shadow': '0 0 10px #00FFFF',
      'transition': 'all 0.3s ease'
    });
    
    // Add hover effect
    authorButton.hover(
      function() {
        $(this).css({
          'background-color': '#FF00FF',
          'color': '#000033',
          'box-shadow': '0 0 15px #FF00FF'
        });
      },
      function() {
        $(this).css({
          'background-color': '#00FFFF',
          'color': '#000033',
          'box-shadow': '0 0 10px #00FFFF'
        });
      }
    );
    
    // Add click event
    authorButton.click(() => Engine.play('Author\'s Note'));
    
    $('body').append(authorButton);
  }
}

// Helper function to create banners
function createBanners() {
  if ($('.banner-container-1').length === 0) {
    $('body').append(`
      <div class="banner-container-1">
        <div class="banner-text-1">SYSTEM ALERT: REALITY DISTORTION DETECTED IN AZURE COVE // DIMENSIONAL BREACH IN SECTOR 7G // EXISTENTIAL KNOT ACTIVITY INCREASING // MAUREPAS SECURITY NOTIFIED // THE STACKS EXPANDING // M'RKATH'NEB ENERGY SIGNATURES DETECTED</div>
      </div>

      <div class="banner-container-2">
        <div class="banner-text-2">WELCOME TO SHELLHAVEN // POPULATION: NOWHERE! // TIME DISPLACEMENT WARNING // MULTIPLE DIMENSIONS CONVERGING // PRETERNATURAL AFFAIRS DEPARTMENT INVESTIGATING // HOLYWILDISTS SEEKING OFFERINGS // DEPT. OF CRYPTONOMICS RESEARCH IN PROGRESS</div>
      </div>
    `);
  }
}

// Banner update functions
window.updateBanner1 = function(newText) {
  $('.banner-text-1').text(newText);
};

window.updateBanner2 = function(newText) {
  $('.banner-text-2').text(newText);
};

// Manual blackout trigger
window.triggerBlackout = triggerBlackoutGlitch;

// Macro definitions - consolidated with ES6 template functions
// Define a helper function to create macros
function createTextEffectMacro(name, className, extraProcessing = null) {
  Macro.add(name, {
    tags: null,
    handler: function() {
      const content = this.payload[0].contents;
      const $wrapper = $(document.createElement('span'));
      
      $wrapper.addClass(`glitch-text ${className}`);
      
      if (extraProcessing) {
        extraProcessing($wrapper, content);
      } else {
        $wrapper.wiki(content);
      }
      
      $wrapper.appendTo(this.output);
    }
  });
}

// Create basic text effect macros
createTextEffectMacro('twitch', 'twitch');
createTextEffectMacro('distort', 'distort');
createTextEffectMacro('decay', 'decay');
createTextEffectMacro('warp', 'warp');
createTextEffectMacro('corrupt', 'corrupt', ($wrapper, content) => {
  $wrapper.attr('data-text', content);
  $wrapper.wiki(content);
});
createTextEffectMacro('malfunction', 'malfunction');
createTextEffectMacro('static', 'static-text', ($wrapper, content) => {
  $wrapper.attr('data-text', content);
  $wrapper.wiki(content);
});

// Letter animation macros
function createLetterAnimationMacro(name, containerClass, letterClass) {
  Macro.add(name, {
    tags: null,
    handler: function() {
      const content = this.payload[0].contents;
      const letters = content.split('');
      
      const $wrapper = $(document.createElement('span'));
      $wrapper.addClass(containerClass);
      
      letters.forEach((letter, index) => {
        if (letter === ' ') {
          $wrapper.append(' ');
        } else {
          const $letter = $(document.createElement('span'));
          $letter.addClass(letterClass);
          
          // Calculate delay based on position
          const delay = (index % 6) * 0.5;
          $letter.css('animation-delay', delay + 's');
          
          $letter.text(letter);
          $wrapper.append($letter);
        }
      });
      
      $wrapper.appendTo(this.output);
    }
  });
}

// Create letter animation macros
createLetterAnimationMacro('triquetra', 'triquetra-container', 'triquetra-letter');
createLetterAnimationMacro('loopy', 'loopy-container', 'loopy-letter');

// ASCII Triquetra fallback macro
Macro.add('asciitriquetra', {
  tags: null,
  handler: function() {
    const word = this.payload[0].contents.trim();
    const $wrapper = $(document.createElement('pre'));
    $wrapper.addClass('ascii-triquetra');
    
    // Create ASCII art pattern more efficiently using template literal
    const asciiArt = `
      ${word}${word}${word}
    ${word}         ${word}
  ${word}             ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
${word}                 ${word}
  ${word}             ${word}
    ${word}         ${word}
      ${word}${word}${word}
    `;
    
    $wrapper.text(asciiArt);
    $wrapper.appendTo(this.output);
  }
});

// Flash text macro with options
Macro.add('flash', {
  tags: null,
  handler: function() {
    const content = this.payload[0].contents;
    const type = this.args.length > 0 ? this.args[0] : "simple";
    
    const $wrapper = $(document.createElement('span'));
    
    // Map type to class
    const typeToClass = {
      "color": 'colored-flash',
      "glitch": 'glitch-flash',
      "mrkath": 'mrkath-flash',
      "simple": 'flash-text'
    };
    
    $wrapper.addClass(typeToClass[type] || 'flash-text');
    $wrapper.wiki(content);
    $wrapper.appendTo(this.output);
  }
});

// Random flashing text function - optimized to reduce repetition
function createRandomFlashingText(elementSelector, options = {}) {
  const settings = {
    baseColor: "#00FF00",
    flashColors: ["#FF00FF", "#00FFFF", "#FFFF00", "#FF0000"],
    minInterval: 100,
    maxInterval: 3000,
    flashDuration: 100,
    glitchProbability: 0.3,
    transformProbability: 0.2,
    ...options
  };
  
  const element = document.querySelector(elementSelector);
  if (!element) return;
  
  // Set initial style
  element.style.color = settings.baseColor;
  element.style.transition = `color ${settings.flashDuration/2}ms ease`;
  
  // Flash effect function
  function createFlash() {
    // Get random properties
    const randomColor = settings.flashColors[Math.floor(Math.random() * settings.flashColors.length)];
    const useGlitch = Math.random() < settings.glitchProbability;
    const useTransform = Math.random() < settings.transformProbability;
    
    // Apply flash styles
    const styles = {
      color: randomColor,
      textShadow: "none",
      transform: "none"
    };
    
    if (useGlitch) {
      const offsetX = Math.floor(Math.random() * 5) - 2;
      const offsetY = Math.floor(Math.random() * 5) - 2;
      styles.textShadow = `${offsetX}px ${offsetY}px 5px ${randomColor}`;
    }
    
    if (useTransform) {
      const scale = 0.9 + Math.random() * 0.2;
      const rotate = Math.floor(Math.random() * 3) - 1;
      const translateX = Math.floor(Math.random() * 7) - 3;
      styles.transform = `scale(${scale}) rotate(${rotate}deg) translateX(${translateX}px)`;
    }
    
    // Apply styles
    Object.assign(element.style, styles);
    
    // Reset after duration
    setTimeout(() => {
      element.style.color = settings.baseColor;
      element.style.textShadow = "none";
      element.style.transform = "none";
    }, settings.flashDuration);
    
    // Schedule next flash
    const nextInterval = Math.floor(Math.random() * (settings.maxInterval - settings.minInterval)) + settings.minInterval;
    setTimeout(createFlash, nextInterval);
  }
  
  // Start flashing
  createFlash();
}

// Random flash macro
Macro.add('randomflash', {
  tags: null,
  handler: function() {
    const content = this.payload[0].contents;
    const uniqueId = `random-flash-${Math.floor(Math.random() * 10000)}`;
    
    const $wrapper = $(document.createElement('span'));
    $wrapper.attr('id', uniqueId);
    $wrapper.wiki(content);
    $wrapper.appendTo(this.output);
    
    // Process options
    const options = {};
    if (this.args.length > 0) {
      if (this.args[0] && typeof this.args[0] === 'string') {
        options.baseColor = this.args[0];
      }
      if (this.args[1] && Array.isArray(this.args[1])) {
        options.flashColors = this.args[1];
      }
      if (this.args[2] && typeof this.args[2] === 'number') {
        options.minInterval = this.args[2];
      }
      if (this.args[3] && typeof this.args[3] === 'number') {
        options.maxInterval = this.args[3];
      }
    }
    
    // Apply effect
    createRandomFlashingText(`#${uniqueId}`, options);
  }
});

// Time-sensitive content system
$(document).on(':passagerender', function() {
  // Create flash overlay if needed
  if ($('#time-sensitive-flash-overlay').length === 0) {
    $('body').append('<div id="time-sensitive-flash-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #FF0000; opacity: 0; pointer-events: none; z-index: 9999;"></div>');
  }
  
  // Process time-sensitive elements
  setTimeout(function() {
    $('.time-sensitive').each(function() {
      const $element = $(this);
      
      // Get time limit with fallback
      const timeLimit = parseInt($element.attr('data-time-limit')) || 10;
      
      // Generate unique ID if needed
      const uniqueId = $element.attr('id') || 'time-sensitive-' + Math.floor(Math.random() * 10000);
      $element.attr('id', uniqueId);
      
      // Apply baseline styling
      $element.css({
        'position': 'relative',
        'border': '1px solid #00FF00',
        'box-shadow': '0 0 5px #00FF00',
        'padding': '.5px 10px 5px 10px',
        'margin': '5px 0',
        'cursor': 'pointer',
        'background-color': 'rgba(0, 20, 0, 0.2)',
        'line-height': '1.5'
      });
      
      // Check if already processed
      if (glitchState.hiddenElements && glitchState.hiddenElements[uniqueId]) {
        $element.css('display', 'none');
        return;
      }
      
      // Check if already captured
      if (glitchState.capturedElements && glitchState.capturedElements[uniqueId]) {
        $element.css({
          'border': 'none',
          'box-shadow': 'none',
          'cursor': 'auto',
          'background-color': 'transparent',
          'padding': 'inherit'
        });
        return;
      }
      
      // Start countdown
      let timeLeft = timeLimit;
      const interval = setInterval(function() {
        timeLeft--;
        
        // Update visual indicator
        const urgencyFactor = 1 - (timeLeft / timeLimit);
        const r = Math.floor(255 * urgencyFactor);
        const g = Math.floor(255 * (1 - urgencyFactor));
        $element.css({
          'border-color': `rgb(${r}, ${g}, 0)`,
          'box-shadow': `0 0 ${5 + (urgencyFactor * 10)}px rgb(${r}, ${g}, 0)`
        });
        
        if (timeLeft <= 0) {
          clearInterval(interval);
          triggerDisappearanceSequence($element, uniqueId);
        }
      }, 1000);
      
      // Handle clicks to preserve content
      $element.on('click', function() {
        clearInterval(interval);
        preserveElement($element, uniqueId);
      });
    });
  }, 100);
});

// Helper function for time-sensitive content disappearance
function triggerDisappearanceSequence($element, uniqueId) {
  const $flashOverlay = $('#time-sensitive-flash-overlay');
  
  // Flash sequence
  const flashSequence = [
    { time: 0, action: () => $flashOverlay.css({ 'opacity': '0.8', 'transition': 'opacity 50ms ease' }) },
    { time: 150, action: () => $flashOverlay.css({ 'opacity': '0', 'transition': 'opacity 50ms ease' }) },
    { time: 300, action: () => $flashOverlay.css({ 'opacity': '0.8', 'transition': 'opacity 50ms ease' }) },
    { time: 450, action: () => $flashOverlay.css({ 'opacity': '0', 'transition': 'opacity 50ms ease' }) },
    { time: 600, action: () => $flashOverlay.css({ 'opacity': '0.8', 'transition': 'opacity 50ms ease' }) },
    { time: 750, action: () => $flashOverlay.css({ 'opacity': '0', 'transition': 'opacity 50ms ease' }) },
    { time: 800, action: () => {
      // Glitchy disappearance
      $element.css({
        'transform': 'translateX(5px)',
        'opacity': '0.7'
      });
      
      setTimeout(() => {
        $element.css({ 'transform': 'translateX(-10px)' });
        
        setTimeout(() => {
          $element.css({
            'opacity': '0.3',
            'transform': 'translateX(0)'
          });
          
          setTimeout(() => {
            $element.css('display', 'none');
            // Mark as hidden
            glitchState.hiddenElements[uniqueId] = true;
          }, 200);
        }, 100);
      }, 100);
    }}
  ];
  
  // Execute flash sequence
  flashSequence.forEach(step => {
    setTimeout(step.action, step.time);
  });
}

// Helper function to preserve time-sensitive element
function preserveElement($element, uniqueId) {
  // Acknowledge preservation with visual feedback
  $element.css({
    'border-color': '#00FFFF',
    'box-shadow': '0 0 15px #00FFFF'
  });
  
  // Flash effect for confirmation
  $element.css('background-color', 'rgba(0, 255, 255, 0.3)');
  setTimeout(() => {
    $element.css('background-color', 'rgba(0, 20, 0, 0.2)');
  }, 300);
  
  // Gradually normalize appearance
  setTimeout(() => {
    $element.css({
      'transition': 'all 1.5s ease',
      'border': 'none',
      'box-shadow': 'none',
      'background-color': 'transparent',
      'padding': 'inherit'
    });
  }, 1000);
  
  $element.off('click');
  
  // Mark as preserved
  glitchState.capturedElements[uniqueId] = true;
}

// =============================================
// OPTIMIZED ACHIEVEMENTS SYSTEM FOR TWINE
// =============================================

// Centralized state management
const achievementSystem = {
  // Configuration
  config: {
    notificationDuration: 5000,
    animationSpeed: 300,
    checkDelay: 200
  },
  
  // DOM element cache
  elements: {
    button: null,
    panel: null,
    backdrop: null
  },
  
  // Initialize the achievements system
  init() {
    // Only initialize once
    if (this.initialized) return;
    
    // Set up state if it doesn't exist
    if (!State.variables.achievements) {
      State.variables.achievements = {
        earned: {},
        displayed: {},
        total: 0,
        totalPossible: achievementsList.length
      };
    }
    
    // Create UI elements with slight delay to not block rendering
    setTimeout(() => {
      this.createAchievementsButton();
      this.checkCurrentPassage();
    }, 300);
    
    // Add passage navigation listeners
    $(document).on(':passageend', () => {
      setTimeout(() => this.checkCurrentPassage(), this.config.checkDelay);
    });
    
    this.initialized = true;
  },
  
  // Create the achievements button
  createAchievementsButton() {
    if ($('#achievements-button').length > 0) return;
    
    const button = $('<div id="achievements-button">Achievements</div>').css({
      'position': 'fixed',
      'bottom': '90px',
      'left': '20px',
      'background-color': '#00FFFF',
      'color': '#000033',
      'padding': '8px 15px',
      'border': '2px solid #FF00FF',
      'border-radius': '5px',
      'font-family': 'Courier New, monospace',
      'font-weight': 'bold',
      'cursor': 'pointer',
      'z-index': '1000',
      'box-shadow': '0 0 10px #00FFFF',
      'transition': 'all 0.3s ease'
    });
    
    // Add hover effects
    button.hover(
      function() {
        $(this).css({
          'background-color': '#FF00FF',
          'color': '#000033',
          'box-shadow': '0 0 15px #FF00FF'
        });
      },
      function() {
        $(this).css({
          'background-color': '#00FFFF',
          'color': '#000033',
          'box-shadow': '0 0 10px #00FFFF'
        });
      }
    );
    
    // Add click handler
    button.click(() => this.showAchievementsPanel());
    
    // Add to body
    $('body').append(button);
    this.elements.button = button;
  },
  
  // Check for unlockable achievements
  checkCurrentPassage() {
    if (!achievementsList) return;
    
    // Ensure state is properly initialized
    if (!State.variables.achievements) {
      State.variables.achievements = {
        earned: {},
        displayed: {},
        total: 0,
        totalPossible: achievementsList.length
      };
    }
    
    // Make sure the total possible is current
    State.variables.achievements.totalPossible = achievementsList.length;
    
    // Check each achievement
    achievementsList.forEach(achievement => {
      if (achievement.check()) {
        this.unlockAchievement(
          achievement.id,
          achievement.title,
          achievement.description,
          achievement.secret || false
        );
      }
    });
  },
  
  // Unlock an achievement
  unlockAchievement(id, title, description, secret = false) {
    // Guard clause for invalid state
    if (!State.variables.achievements) return false;
    
    // Only proceed if not already earned
    if (!State.variables.achievements.earned[id]) {
      // Record achievement data
      State.variables.achievements.earned[id] = {
        id,
        title,
        description,
        secret,
        timestamp: new Date().toISOString()
      };
      
      // Increment counter
      State.variables.achievements.total++;
      
      // Show notification if not already displayed
      if (!State.variables.achievements.displayed[id]) {
        this.showNotification(id, title, description);
        State.variables.achievements.displayed[id] = true;
      }
      
      return true;
    }
    
    return false;
  },
  
  // Show achievement notification
  showNotification(id, title, description) {
    // Create notification element
    const notification = $('<div id="achievement-notification"></div>').css({
      'position': 'fixed',
      'bottom': '150px',
      'right': '20px',
      'background-color': '#000033',
      'color': '#00FF00',
      'border': '3px solid #00FFFF',
      'box-shadow': '0 0 10px #00FFFF',
      'padding': '10px',
      'z-index': '1000',
      'font-family': '"Courier New", monospace',
      'max-width': '300px',
      'opacity': '0',
      'transform': 'translateX(50px)',
      'border-radius': '5px',
      'transition': 'all 0.3s ease'
    });
    
    // Add content
    notification.html(`
      <div style="display: flex; align-items: center;">
        <div style="margin-right: 10px;">
          <div style="width: 30px; height: 30px; background-color: #00FFFF; border-radius: 50%; display: flex; justify-content: center; align-items: center;">
            <span style="color: #000033; font-weight: bold;">!</span>
          </div>
        </div>
        <div>
          <div style="font-weight: bold; color: #FF00FF; margin-bottom: 5px; font-size: 14px; text-transform: uppercase;">Achievement Unlocked</div>
          <div style="color: #00FFFF; margin-bottom: 3px; font-size: 16px;">${title}</div>
          <div style="color: #CCCCCC; font-size: 12px;">${description}</div>
        </div>
      </div>
    `);
    
    // Add to page
    $('body').append(notification);
    
    // Animate in
    setTimeout(() => {
      notification.css({
        'opacity': '1',
        'transform': 'translateX(0)'
      });
    }, 50);
    
    // Animate out and remove
    setTimeout(() => {
      notification.css({
        'opacity': '0',
        'transform': 'translateX(50px)'
      });
      setTimeout(() => notification.remove(), 500);
    }, this.config.notificationDuration);
  },
  
  // Show the achievements panel
  showAchievementsPanel() {
    // Create backdrop with animation
    const backdrop = $('<div id="achievements-backdrop"></div>').css({
      'position': 'fixed',
      'top': '0',
      'left': '0',
      'width': '100%',
      'height': '100%',
      'background-color': 'rgba(0, 0, 20, 0.8)',
      'z-index': '9999',
      'display': 'flex',
      'justify-content': 'center',
      'align-items': 'center',
      'opacity': '0',
      'transition': `opacity ${this.config.animationSpeed}ms ease`
    });
    
    // Create panel with animation
    const panel = $('<div id="achievements-panel"></div>').css({
      'background-color': '#000033',
      'border': '3px solid #00FFFF',
      'box-shadow': '0 0 20px #00FFFF',
      'width': '80%',
      'max-width': '600px',
      'max-height': '80%',
      'overflow-y': 'auto',
      'padding': '20px',
      'color': '#00FF00',
      'font-family': 'Courier New, monospace',
      'transform': 'scale(0.9)',
      'transition': `transform ${this.config.animationSpeed}ms ease`,
      'position': 'relative'
    });
    
    // Add header with title and progress
    panel.append(`
      <div style="text-align: center; margin-bottom: 20px; border-bottom: 2px solid #00FFFF; padding-bottom: 10px;">
        <h2 style="color: #FF00FF; margin: 0;">AZURE COVE ACHIEVEMENTS</h2>
        <div style="color: #00FFFF; margin-top: 5px;">
          ${State.variables.achievements.total} / ${State.variables.achievements.totalPossible} Discovered
        </div>
      </div>
    `);
    
    // Create achievement grid
    const list = this.buildAchievementsList();
    panel.append(list);
    
    // Add close button
    const closeButton = this.createCloseButton(() => {
      panel.css('transform', 'scale(0.9)');
      backdrop.css('opacity', '0');
      
      setTimeout(() => backdrop.remove(), this.config.animationSpeed);
    });
    
    // Assemble panel
    panel.append(closeButton);
    backdrop.append(panel);
    $('body').append(backdrop);
    
    // Animate in
    setTimeout(() => {
      backdrop.css('opacity', '1');
      panel.css('transform', 'scale(1)');
    }, 10);
    
    // Cache references
    this.elements.panel = panel;
    this.elements.backdrop = backdrop;
  },
  
  // Build the achievements list UI
  buildAchievementsList() {
    const list = $('<div id="achievements-list"></div>').css({
      'display': 'grid',
      'grid-template-columns': 'repeat(auto-fill, minmax(250px, 1fr))',
      'gap': '15px'
    });
    
    achievementsList.forEach(achievement => {
      const earned = State.variables.achievements.earned[achievement.id];
      const isSecret = achievement.secret && !earned;
      
      // Create achievement item
      const achievementItem = $('<div class="achievement-item"></div>').css({
        'border': earned ? '2px solid #00FF00' : '2px solid #333333',
        'padding': '10px',
        'border-radius': '5px',
        'background-color': earned ? 'rgba(0, 255, 0, 0.1)' : 'rgba(50, 50, 50, 0.3)',
        'transition': 'all 0.3s',
        'position': 'relative',
        'overflow': 'hidden'
      });
      
      // Add hover effect for earned achievements
      if (earned) {
        achievementItem.hover(
          function() {
            $(this).css({
              'transform': 'scale(1.03)',
              'box-shadow': '0 0 10px #00FF00'
            });
          },
          function() {
            $(this).css({
              'transform': 'scale(1)',
              'box-shadow': 'none'
            });
          }
        );
      }
      
      // Add secret pattern overlay if needed
      if (isSecret) {
        achievementItem.append(`
          <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: repeating-linear-gradient(45deg, rgba(50, 50, 50, 0.3), rgba(50, 50, 50, 0.3) 10px, rgba(40, 40, 40, 0.3) 10px, rgba(40, 40, 40, 0.3) 20px); z-index: 0;"></div>
        `);
      }
      
      // Add achievement content
      achievementItem.append(`
        <div style="position: relative; z-index: 1;">
          <div style="font-weight: bold; color: ${earned ? '#FF00FF' : '#777777'}; margin-bottom: 5px;">
            ${isSecret ? "???" : achievement.title}
          </div>
          <div style="font-size: 12px; color: ${earned ? '#CCCCCC' : '#555555'};">
            ${isSecret ? "Undiscovered achievement" : achievement.description}
          </div>
          ${earned ? `<div style="font-size: 10px; color: #00FFFF; margin-top: 5px;">Unlocked</div>` : ''}
        </div>
      `);
      
      list.append(achievementItem);
    });
    
    return list;
  },
  
  // Create a standardized close button
  createCloseButton(onClickCallback) {
    const closeButton = $('<div class="close-button"></div>').css({
      'position': 'absolute',
      'top': '10px',
      'right': '10px',
      'color': '#FF00FF',
      'font-size': '24px',
      'cursor': 'pointer',
      'width': '30px',
      'height': '30px',
      'display': 'flex',
      'justify-content': 'center',
      'align-items': 'center',
      'border': '2px solid #FF00FF',
      'border-radius': '50%',
      'transition': 'all 0.3s'
    }).text('×');
    
    // Add hover effects
    closeButton.hover(
      function() {
        $(this).css({
          'background-color': '#FF00FF',
          'color': '#000033'
        });
      },
      function() {
        $(this).css({
          'background-color': 'transparent',
          'color': '#FF00FF'
        });
      }
    );
    
    // Add click handler
    closeButton.click(onClickCallback);
    
    return closeButton;
  }
};

// Define achievements list
const achievementsList = [
  {
    id: "first_visit",
    title: "Down South We Go",
    description: "Visited Azure Cove for the first time",
    check: function() {
      return true; // Always unlocks when checked on first visit
    }
  },
  {
    id: "priory_explorer",
    title: "Forbidden Explorer",
    description: "Discovered the secrets of the Priory",
    check: function() {
      return ["See what Dick and Chuck are doing", 
             "Dick ponders", 
             "Dick freaks, and so Chuck freaks", 
             "The boys jump"].includes(State.passage);
    }
  },
  {
    id: "dreamwalker",
    title: "Dreamwalker",
    description: "Explored the dreams of Shellhaven",
    check: function() {
      return ["Alice's Wet Nightmares", 
             "Wendel's Dream Journal"].includes(State.passage);
    }
  },
  {
    id: "stacks_survivor",
    title: "Stacks Survivor",
    description: "Entered The Stacks and made it back alive",
    check: function() {
      return State.passage === "This is a little more interesting...";
    }
  },
  {
    id: "master_reader",
    title: "Temporal Reader",
    description: "Saved the content of a time-sensitive passage",
    check: function() {
      return window.capturedElements && Object.keys(window.capturedElements).length > 0;
    }
  },
  {
    id: "book_finder", 
    title: "Arcane Bibliophile",
    description: "Found the odd book before it disappeared",
    check: function() {
      return State.passage === "the odd book";
    }
  },
  {
    id: "moonlight_ritual",
    title: "Moonlight Ritual",
    description: "Participated in a ritual with the Moonlighters",
    secret: true,
    check: function() {
      return State.passage === "walked forward a few feet";
    }
  },
  {
    id: "witness",
    title: "Interdimensional Witness",
    description: "Saw M'RKATH'NEB's true form",
    secret: true,
    check: function() {
      return false; // This would be triggered at a specific story moment
    }
  }
];

// Export public methods to window for external access
window.unlockAchievement = function(id, title, description, secret = false) {
  return achievementSystem.unlockAchievement(id, title, description, secret);
};

window.showAchievementsPanel = function() {
  achievementSystem.showAchievementsPanel();
};

window.checkAchievements = function() {
  achievementSystem.checkCurrentPassage();
};

// Create Twine macros for achievement functions
Macro.add('checkAchievements', {
  handler: function() {
    achievementSystem.checkCurrentPassage();
  }
});

Macro.add('unlockAchievement', {
  handler: function() {
    if (this.args.length < 3) {
      return this.error('The <<unlockAchievement>> macro requires an id, title, and description');
    }
    
    const id = this.args[0];
    const title = this.args[1];
    const description = this.args[2];
    const secret = this.args.length > 3 ? this.args[3] === true : false;
    
    achievementSystem.unlockAchievement(id, title, description, secret);
  }
});

// Initialize the achievement system when document is ready
$(document).ready(function() {
  achievementSystem.init();
});

//Sound engine with play button, required for playing sound on some browsers
postrender['playBackgroundMusic'] = function (content) {
  if (!window.bgMusicInitialized) {
    try {
      let audioElement = document.createElement('audio');
      audioElement.src = 'https://static.wixstatic.com/mp3/f3adad_2ed8cf38f1da4da285ca07e05e3ca363.wav';
      audioElement.id = 'bgMusic';
      audioElement.loop = true;
      
      // Modern browsers require user interaction before audio can play
      // This adds a play button that will appear at the start
      let playButton = document.createElement('button');
      playButton.textContent = 'Play Sound';
      playButton.style.position = 'fixed';
      playButton.style.top = '10px';
      playButton.style.right = '10px';
      playButton.style.zIndex = '1000';
      
      playButton.addEventListener('click', function() {
        audioElement.play();
        this.remove();
      });
      
      document.body.appendChild(audioElement);
      document.body.appendChild(playButton);
      
      window.bgMusicInitialized = true;
    } catch (e) {
      console.error("Audio initialization failed:", e);
    }
  }
};

// =========================================
// OPTIMIZED TWINE SPECIAL EFFECTS SYSTEM
// =========================================

// Create a namespace to avoid global pollution
const TwineEffects = {
  // Configuration for diamond effect
  diamondConfig: {
    size: 100,
    animationDuration: 1500,
    shineSize: 150,
    shineInDuration: 300,
    shineOutDuration: 1000,
    cleanupDelay: 500
  },
  
  // Reference cache for DOM elements
  elements: {},
  
  // Initialize all effects
  init() {
    this.initDiamondEffect();
    this.initPathCompletion();
    
    // Attach to Twine events
    $(document).on(':passagerender', () => {
      this.setupZureClickHandlers();
      this.processCompletedPaths();
    });
  },
  
  // Diamond effect initialization
  initDiamondEffect() {
    // Only initialize once
    if ($('#zure-diamond').length > 0) return;
    
    // Create diamond elements
    const diamond = $('<div id="zure-diamond"></div>');
    const diamondSides = $('<div id="zure-diamond-sides"></div>');
    
    // Style main diamond
    diamond.css({
      'position': 'fixed',
      'top': '50%',
      'left': '50%',
      'width': `${this.diamondConfig.size}px`,
      'height': `${this.diamondConfig.size}px`,
      'transform': 'translate(-50%, -50%) scale(0)',
      'z-index': '9999',
      'opacity': '0',
      'pointer-events': 'none',
      'transition': 'transform 0.5s, opacity 0.5s',
      'transform-style': 'preserve-3d',
      'perspective': '800px'
    });
    
    // Style diamond sides
    diamondSides.css({
      'position': 'fixed',
      'top': '50%',
      'left': '50%',
      'width': `${this.diamondConfig.size}px`,
      'height': `${this.diamondConfig.size}px`,
      'transform': 'translate(-50%, -50%) rotateY(90deg) scale(0)',
      'z-index': '9998',
      'opacity': '0',
      'pointer-events': 'none',
      'transition': 'transform 0.5s, opacity 0.5s',
      'transform-style': 'preserve-3d'
    });
    
    // Add the side face
    const diamondSide = $('<div class="diamond-side"></div>').css({
      'position': 'absolute',
      'top': '0',
      'left': '0',
      'width': '100%',
      'height': '100%',
      'background': 'linear-gradient(135deg, rgba(255,255,255,0.7), rgba(200,200,255,0.4))',
      'transform-style': 'preserve-3d'
    });
    
    // Add diamond animation keyframes if not already present
    if (!document.getElementById('diamond-animations')) {
      const styleSheet = $('<style id="diamond-animations"></style>');
      styleSheet.html(`
        @keyframes zure-diamond-spin {
          from { transform: translate(-50%, -50%) scale(1) rotate(0deg); }
          to { transform: translate(-50%, -50%) scale(1) rotate(360deg); }
        }
        @keyframes zure-diamond-sides-spin {
          from { transform: translate(-50%, -50%) rotateY(90deg) scale(1) rotate(0deg); }
          to { transform: translate(-50%, -50%) rotateY(90deg) scale(1) rotate(360deg); }
        }
      `);
      $('head').append(styleSheet);
    }
    
    // Assemble and add to document
    diamondSides.append(diamondSide);
    $('body').append(diamond);
    $('body').append(diamondSides);
    
    // Cache references
    this.elements.diamond = diamond;
    this.elements.diamondSides = diamondSides;
  },
  
  // Show the diamond effect
  showDiamond() {
    const { diamond, diamondSides } = this.elements;
    const config = this.diamondConfig;
    
    // Show diamond
    diamond.css({
      'opacity': '1',
      'transform': 'translate(-50%, -50%) scale(1)',
      'animation': `zure-diamond-spin ${config.animationDuration}ms linear`
    });
    
    // Show diamond sides
    diamondSides.css({
      'opacity': '1',
      'transform': 'translate(-50%, -50%) rotateY(90deg) scale(1)',
      'animation': `zure-diamond-sides-spin ${config.animationDuration}ms linear`
    });
    
    // Create shine effect
    const shine = $('<div id="zure-shine"></div>').css({
      'position': 'fixed',
      'top': '50%',
      'left': '50%',
      'width': `${config.shineSize}px`,
      'height': `${config.shineSize}px`,
      'background': 'radial-gradient(circle, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0) 70%)',
      'transform': 'translate(-50%, -50%)',
      'z-index': '9997',
      'opacity': '0',
      'pointer-events': 'none'
    });
    
    $('body').append(shine);
    
    // Animate shine
    shine.animate(
      { opacity: 0.7 }, 
      config.shineInDuration
    ).animate(
      { opacity: 0 }, 
      config.shineOutDuration, 
      function() { $(this).remove(); }
    );
    
    // Hide diamond after animation
    setTimeout(() => {
      diamond.css({
        'opacity': '0',
        'transform': 'translate(-50%, -50%) scale(0)'
      });
      
      diamondSides.css({
        'opacity': '0',
        'transform': 'translate(-50%, -50%) rotateY(90deg) scale(0)'
      });
      
      // Remove animation after it's done
      setTimeout(() => {
        diamond.css('animation', 'none');
        diamondSides.css('animation', 'none');
      }, config.cleanupDelay);
    }, config.animationDuration);
  },
  
  // Set up click handlers for Zure mentions
  setupZureClickHandlers() {
    // Use text content contains selector to find mentions of Zure
    $('span, p, div').contents().filter(function() {
      return this.nodeType === 3 && this.nodeValue.includes('Zure');
    }).parent().css('cursor', 'pointer').off('click.zure').on('click.zure', () => {
      this.showDiamond();
    });
  },
  
  // Path completion system initialization
  initPathCompletion() {
    // Initialize the store if needed
    if (!State.variables.completedPaths) {
      State.variables.completedPaths = [];
    }
  },
  
  // Mark a path as completed
  markPathCompleted(pathName) {
    // Initialize if needed
    if (!State.variables.completedPaths) {
      State.variables.completedPaths = [];
    }
    
    // Add path if it's not already in the list
    if (!State.variables.completedPaths.includes(pathName)) {
      State.variables.completedPaths.push(pathName);
    }
  },
  
  // Process completed paths and remove corresponding links
  processCompletedPaths() {
    if (!State.variables.completedPaths || State.variables.completedPaths.length === 0) {
      return;
    }
    
    // Use requestAnimationFrame for better performance timing
    requestAnimationFrame(() => {
      // Create a Set for faster lookups
      const completedPathsSet = new Set(
        State.variables.completedPaths.map(path => path.trim())
      );
      
      // Find links to remove
      $('a').each(function() {
        const $link = $(this);
        let linkText = $link.text().trim();
        
        // Check the link's own text
        if (completedPathsSet.has(linkText)) {
          $link.remove();
          return;
        }
        
        // Check child elements if needed
        $link.find('*').each(function() {
          const childText = $(this).text().trim();
          if (completedPathsSet.has(childText)) {
            $link.remove();
            return false; // Break the inner loop
          }
        });
      });
      
      // Optional debug logging when testing
      if (State.variables.debugMode) {
        console.log("Paths marked as completed:", State.variables.completedPaths);
        console.log("Links on page:", $('a').map(function() { return $(this).text().trim(); }).get());
      }
    });
  }
};

// Expose public methods to window for Twine compatibility
window.showZureDiamond = function() {
  TwineEffects.showDiamond();
};

window.markPathCompleted = function(pathName) {
  TwineEffects.markPathCompleted(pathName);
};

// Initialize the effects system when document is ready
$(document).ready(function() {
  TwineEffects.init();
});

// =========================================
// OPTIMIZED TWINE MACROS AND UI COMPONENTS
// =========================================

// Define a namespace to prevent global scope pollution
const TwineMacros = {
  // Configuration
  config: {
    footnote: {
      glitchProbability: 0.2
    },
    letter: {
      animationSpeed: 300,
      modalBgColor: 'rgba(0, 0, 0, 0.7)',
      parchmentColor: '#f8f0d8',
      textColor: '#3a2e1f',
      buttonColor: 'rgba(170, 140, 100, 0.2)',
      buttonHoverColor: 'rgba(170, 140, 100, 0.5)'
    }
  },
  
  // Cache for DOM elements and styles
  cache: {
    letterStyles: null,
    parchmentTexture: null,
    noisePattern: null
  },
  
  // Initialize macros and components
  init() {
    // Apply passage padding
    this.initPassageStyling();
    
    // Create CSS for various components
    this.createComponentStyles();
    
    // Register Twine macros
    this.registerMacros();
    
    // Register event handlers
    this.registerEventHandlers();
  },
  
  // Set up passage styling
  initPassageStyling() {
    $(document).on(':passagerender', () => {
      $('.passage').css('padding-top', '2em');
    });
    
    // Setup passage header processing
    Config.passages.onProcess = (passage) => {
      // Avoid infinite recursion
      if (passage.title !== "PassageHeader") {
        return Story.get("PassageHeader").processText() + passage.text;
      }
      return passage.text;
    };
  },
  
  // Create component styles
  createComponentStyles() {
    // Create style element if it doesn't exist
    if (!document.getElementById('twine-macro-styles')) {
      const styleElement = $('<style id="twine-macro-styles"></style>');
      
      // Add styles for tooltips
      const tooltipStyles = `
        .tooltip {
          position: relative;
          display: inline-block;
          border-bottom: 1px dotted #00FFFF;
          color: #00FFFF;
          cursor: pointer;
        }
        
        .tooltiptext {
          visibility: hidden;
          width: 240px;
          background-color: rgba(0, 10, 30, 0.9);
          color: #fff;
          text-align: center;
          border: 1px solid #00FFFF;
          box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
          border-radius: 6px;
          padding: 8px;
          position: absolute;
          z-index: 1;
          bottom: 125%;
          left: 50%;
          margin-left: -120px;
          opacity: 0;
          transition: opacity 0.3s, transform 0.3s;
          transform: translateY(10px);
          font-size: 0.9em;
        }
        
        .tooltiptext.below {
          bottom: auto;
          top: 125%;
          transform: translateY(-10px);
        }
        
        .tooltip:hover .tooltiptext {
          visibility: visible;
          opacity: 1;
          transform: translateY(0);
        }
        
        /* Lux text effect */
        .lux-text {
          position: relative;
          display: block;
          text-align: right;
          color: #e0c9b5;
          text-shadow: 0 0 5px #f8d191, 0 0 10px #b18c65;
          font-family: 'Times New Roman', serif;
          font-style: italic;
          letter-spacing: 0.5px;
          font-size: 1.05em;
          line-height: 1.4;
          padding: 10px 5px;
        }
        
        .lux-text::after {
          content: attr(data-text);
          position: absolute;
          top: 9px;
          right: 8px;
          color: rgba(177, 140, 101, 0.3);
          z-index: -1;
          text-shadow: none;
        }
        
        /* Letter link styles */
        .letter-link {
          color: #00FFFF;
          cursor: pointer;
          text-decoration: none;
          border-bottom: 1px dotted #00FFFF;
          padding: 2px 5px;
          margin: 0 5px;
          display: inline-block;
          border-radius: 2px;
          transition: all 0.3s ease;
        }
        
        .letter-link:hover {
          color: #FF00FF;
          background-color: #00004B;
          text-decoration: none;
          transform: scale(1.05);
        }
      `;
      
      styleElement.html(tooltipStyles);
      $('head').append(styleElement);
    }
    
    // Cache frequently used styles and patterns
    this.cache.parchmentTexture = `url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.7' numOctaves='2' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.05'/%3E%3C/svg%3E")`;
    
    this.cache.noisePattern = `url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.15' numOctaves='3'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)' opacity='0.4'/%3E%3C/svg%3E")`;
  },
  
  // Register all macros
  registerMacros() {
    // Register footnote macro
    Macro.add('footnote', {
    tags: null,
    handler: function() {
        // Error was here - 'this' context wasn't being preserved correctly
        if (this.args.length < 1) {
            return this.error('The <<footnote>> macro requires a term argument');
        }
        
        const term = this.args[0];
        const definition = this.payload[0].contents;
        
        // Create the footnote element
        const $footnote = $(document.createElement('span'));
        $footnote.addClass('tooltip');
        $footnote.text(term);
        
        // Create the tooltip text
        const $tooltipText = $(document.createElement('span'));
        $tooltipText.addClass('tooltiptext');
        $tooltipText.wiki(definition);
        
        // Add random glitch effect occasionally
        if (Math.random() < 0.2) {
            $tooltipText.addClass('glitch-text');
        }
        
        // Add positioning logic
        $footnote.on('mouseenter', function() {
            const rect = this.getBoundingClientRect();
            const tooltipHeight = $tooltipText.outerHeight();
            
            // Check if enough space above (at least 50px from top of viewport)
            if (rect.top < tooltipHeight + 50) {
                $tooltipText.addClass('below');
            } else {
                $tooltipText.removeClass('below');
            }
        });
        
        // Append the tooltip to the footnote
        $footnote.append($tooltipText);
        
        // Append the footnote to the output
        $footnote.appendTo(this.output);
    }
        
});

  // Add the lux macro
  Macro.add('lux', {
    tags: null,
    handler: function() {
      // Get the content
      const content = this.payload[0].contents;
      
      // Create the wrapper element
      const $wrapper = $(document.createElement('span'));
      $wrapper.addClass('lux-text');
      $wrapper.attr('data-text', content);
      
      // Add right alignment
      $wrapper.css('text-align', 'right');
      $wrapper.css('display', 'block'); // Make it a block element so text-align works
      
      // Add the content
      $wrapper.wiki(content);
      
      // Append to output
      $wrapper.appendTo(this.output);
    }
  });
    
    // Register letter macro
    Macro.add('letter', {
      tags: null,
      handler: function() {
        const content = this.payload[0].contents;
        
        // Create a link that will show the letter when clicked
        const $link = $(document.createElement('a'));
        $link.addClass('letter-link');
        $link.html("[Read Letter]");
        
        // Add click functionality
        $link.on('click', () => {
          TwineMacros.showLetter(content);
        });
        
        // Append to output
        $link.appendTo(this.output);
      }
    });
  },
  
  // Register event handlers
  registerEventHandlers() {
    // Any global event handlers would go here
  },
  
  // Footnote macro handler
  handleFootnote(context) {
    if (context.args.length < 1) {
      return context.error('The <<footnote>> macro requires a term argument');
    }
    
    const term = context.args[0];
    const definition = context.payload[0].contents;
    
    // Create the footnote element
    const $footnote = $(document.createElement('span'));
    $footnote.addClass('tooltip');
    $footnote.text(term);
    
    // Create the tooltip text
    const $tooltipText = $(document.createElement('span'));
    $tooltipText.addClass('tooltiptext');
    $tooltipText.wiki(definition);
    
    // Add random glitch effect occasionally
    if (Math.random() < this.config.footnote.glitchProbability) {
      $tooltipText.addClass('glitch-text');
    }
    
    // Add positioning logic using a more efficient approach
    $footnote.on('mouseenter', function() {
      const rect = this.getBoundingClientRect();
      const tooltipHeight = $tooltipText.outerHeight();
      
      // Toggle the below class based on available space
      $tooltipText.toggleClass('below', rect.top < tooltipHeight + 50);
    });
    
    // Append the tooltip to the footnote
    $footnote.append($tooltipText);
    
    // Append the footnote to the output
    $footnote.appendTo(context.output);
  },
  
  // Show letter modal
  showLetter(letterContent) {
    const config = this.config.letter;
    
    // Create modal container
    const modal = $('<div id="letter-modal"></div>').css({
      'position': 'fixed',
      'top': '0',
      'left': '0',
      'width': '100%',
      'height': '100%',
      'background-color': config.modalBgColor,
      'z-index': '9000',
      'display': 'flex',
      'justify-content': 'center',
      'align-items': 'center',
      'opacity': '0',
      'transition': `opacity ${config.animationSpeed}ms ease`
    });
    
    // Create letter container
    const letterContainer = $('<div class="letter-container"></div>').css({
      'width': '80%',
      'max-width': '600px',
      'max-height': '80vh',
      'overflow-y': 'auto',
      'background-color': config.parchmentColor,
      'background-image': this.cache.parchmentTexture,
      'color': config.textColor,
      'padding': '40px',
      'font-family': 'Brush Script MT',
      'font-size': '18px',
      'line-height': '1.6',
      'text-align': 'left',
      'border': '15px solid transparent',
      'border-image': `${this.cache.noisePattern} 30 stretch`,
      'box-shadow': '0 0 30px rgba(0, 0, 0, 0.7)',
      'position': 'relative',
      'transform': 'scale(0.9)',
      'transition': `transform ${config.animationSpeed}ms ease`,
      'white-space': 'pre-wrap'
    });
    
    // Create close button
    const closeButton = $('<div class="letter-close">×</div>').css({
      'position': 'absolute',
      'top': '10px',
      'right': '10px',
      'width': '30px',
      'height': '30px',
      'background-color': config.buttonColor,
      'color': config.textColor,
      'border-radius': '50%',
      'font-family': 'sans-serif',
      'font-size': '24px',
      'line-height': '28px',
      'text-align': 'center',
      'cursor': 'pointer',
      'transition': 'all 0.3s'
    });
    
    // Add hover effect
    closeButton.hover(
      function() { $(this).css('background-color', config.buttonHoverColor); },
      function() { $(this).css('background-color', config.buttonColor); }
    );
    
    // Add click handler
    closeButton.on('click', function() {
      modal.css('opacity', '0');
      letterContainer.css('transform', 'scale(0.9)');
      setTimeout(() => modal.remove(), config.animationSpeed);
    });
    
    // Add parchment texture and torn edges
    const textureOverlay = $('<div></div>').css({
      'position': 'absolute',
      'top': '0',
      'left': '0',
      'right': '0',
      'bottom': '0',
      'pointer-events': 'none',
      'background-image': 'repeating-linear-gradient(rgba(204, 182, 159, 0.05) 0px, rgba(204, 182, 159, 0.05) 1px, transparent 1px, transparent 2px)',
      'z-index': '-1'
    });
    
    const edgesOverlay = $('<div></div>').css({
      'position': 'absolute',
      'top': '0',
      'left': '0',
      'right': '0',
      'bottom': '0',
      'pointer-events': 'none',
      'background-image': 'radial-gradient(ellipse at top left, rgba(0, 0, 0, 0.1) 0%, transparent 70%), radial-gradient(ellipse at bottom right, rgba(0, 0, 0, 0.1) 0%, transparent 70%)',
      'opacity': '0.7',
      'z-index': '-1'
    });
    
    // Create content container with preserved line breaks
    const contentContainer = $('<div></div>');
    contentContainer.wiki(letterContent);
    
    // Assemble the letter
    letterContainer.append(contentContainer);
    letterContainer.append(textureOverlay);
    letterContainer.append(edgesOverlay);
    letterContainer.append(closeButton);
    modal.append(letterContainer);
    
    // Add to the page
    $('body').append(modal);
    
    // Animate in using requestAnimationFrame for better performance
    requestAnimationFrame(() => {
      modal.css('opacity', '1');
      letterContainer.css('transform', 'scale(1)');
    });
  }
};

// Export needed functions to window
window.showLetter = function(letterContent) {
  TwineMacros.showLetter(letterContent);
};

// Initialize when document is ready
$(document).ready(function() {
  TwineMacros.init();
});

// ================================================
// OPTIMIZED DEATH SYSTEM FOR TWINE
// ================================================

// Create a namespace to contain all death-related functionality
const DeathSystem = {
  // Configuration
  config: {
    defaultMessage: "FATAL ERROR",
    defaultDelay: 2000,
    effectDuration: 5000,
    deathPassage: "Death",
    glitchInterval: 120,
    cleanupDelay: 500
  },
  
  // State tracking
  state: {
    deathTriggered: false,
    effectInterval: null
  },
  
  // Content arrays
  content: {
    // Main death messages
    glitchMessages: [
      'CONSUMED', 
      'SYSTEM FAILURE', 
      'FATAL ERROR', 
      'BREACH DETECTED', 
      'SHUTDOWN',
      'HELP ME',
      'THEY\'RE COMING',
      'DON\'T LOOK',
      'REALITY FRACTURE',
      'THE WALLS BLEED'
    ],
    
    // Subtext messages
    subtextMessages: [
      'it sees you', 
      'saving brain state', 
      'extracting memory', 
      'eyes open in the dark', 
      'nowhere to hide'
    ]
  },
  
  // Effect definitions
  effects: [
    {fn: 'flashBackground', weight: 3},
    {fn: 'shakeText', weight: 3},
    {fn: 'changeMessage', weight: 2},
    {fn: 'addGlitchLine', weight: 4}, 
    {fn: 'addStaticNoise', weight: 2},
    {fn: 'flashSubtext', weight: 1}
  ],
  
  // Element references
  elements: {
    overlay: null,
    text: null
  },
  
  // Initialize the death system
  init() {
    // Register the death macro
    this.registerMacro();
    
    // Export functions to window for Twine compatibility
    window.playerDeath = (message, delayBeforeGlitch) => this.triggerDeath(message, delayBeforeGlitch);
  },
  
  // Register the death macro
  registerMacro() {
    Macro.add('death', {
      handler: function() {
        // Check for arguments: first is message, second is optional delay in milliseconds
        const message = this.args.length > 0 ? this.args[0] : DeathSystem.config.defaultMessage;
        const delay = this.args.length > 1 ? Number(this.args[1]) : 8000; // Default 8 second delay
        
        // Schedule death with the requested delay
        window.setTimeout(() => {
          DeathSystem.triggerDeath(message, 0); // 0 delay since we already delayed
        }, delay);
      }
    });
  },
  
  // Main entry point for death sequence
  triggerDeath(message, delayBeforeGlitch = this.config.defaultDelay) {
    // Prevent multiple death triggers
    if (this.state.deathTriggered) {
      return;
    }
    
    // Set the flag to prevent multiple calls
    this.state.deathTriggered = true;
    
    // Schedule the glitch effect to start after the delay
    window.setTimeout(() => this.startGlitchEffect(message), delayBeforeGlitch);
  },
  
  // Start the glitch effect sequence
  startGlitchEffect(message) {
    // Create and set up the overlay
    this.createOverlay(message);
    
    // Try to play a glitch sound
    this.playGlitchSound();
    
    // Start the effect sequence
    this.runEffectSequence();
    
    // Schedule the end of the sequence
    setTimeout(() => this.endDeathSequence(), this.config.effectDuration);
  },
  
  // Create the visual overlay for death effect
  createOverlay(message) {
    // Create a full-screen glitch overlay
    const overlay = document.createElement('div');
    overlay.id = 'glitch-overlay';
    Object.assign(overlay.style, {
      position: 'fixed',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: '#000033',
      zIndex: '9999',
      overflow: 'hidden'
    });
    
    // Add glitch text in the center
    const text = document.createElement('h1');
    text.id = 'glitch-text';
    Object.assign(text.style, {
      position: 'absolute',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      color: '#FF0000',
      fontSize: '4em',
      whiteSpace: 'nowrap',
      textShadow: '0 0 10px #FF0000'
    });
    text.textContent = message || this.config.defaultMessage;
    
    // Add it to the page
    overlay.appendChild(text);
    document.body.appendChild(overlay);
    
    // Store references
    this.elements.overlay = overlay;
    this.elements.text = text;
  },
  
  // Attempt to play the glitch sound
  playGlitchSound() {
    try {
      const audio = new Audio();
      audio.src = "https://static.wixstatic.com/mp3/f3adad_9ee367356f6d486083459f5f6d7dfa91.wav";
      audio.volume = 0.5;
      audio.play();
    } catch (error) {
      console.error("Audio couldn't play, continuing without sound");
    }
  },
  
  // Run the sequence of visual effects
  runEffectSequence() {
    // Create a weighted array of effects for selection
    const weightedEffects = [];
    
    // Build the weighted effect array
    this.effects.forEach(effect => {
      for (let i = 0; i < effect.weight; i++) {
        weightedEffects.push(effect.fn);
      }
    });
    
    // Start the effect interval
    this.state.effectInterval = setInterval(() => {
      // Run 1-4 random effects
      const numEffects = Math.floor(Math.random() * 4) + 1;
      for (let i = 0; i < numEffects; i++) {
        const randomIndex = Math.floor(Math.random() * weightedEffects.length);
        const effectName = weightedEffects[randomIndex];
        this[effectName]();
      }
    }, this.config.glitchInterval);
  },
  
  // End the death sequence
  endDeathSequence() {
    // Clean up interval
    clearInterval(this.state.effectInterval);
    
    // Update death counter
    this.updateDeathCounter();
    
    // Clean up overlay after a short delay
    setTimeout(() => {
      if (document.body.contains(this.elements.overlay)) {
        document.body.removeChild(this.elements.overlay);
      }
      
      // Navigate to death passage
      Engine.play(this.config.deathPassage);
      
      // Reset state for future deaths
      this.state.deathTriggered = false;
    }, this.config.cleanupDelay);
  },
  
  // Update the death counter in State variables
  updateDeathCounter() {
    // Initialize death count if it doesn't exist
    if (typeof State.variables.deathCount === 'undefined') {
      State.variables.deathCount = 0;
    }
    
    // Increment the counter
    State.variables.deathCount += 1;
    
    // Set flag that player has died
    State.variables.hasPlayerDied = true;
  },
  
  // ---- VISUAL EFFECTS ----
  
  // Flash the background with random colors
  flashBackground() {
    const overlay = this.elements.overlay;
    
    // Random background color
    overlay.style.backgroundColor = `rgb(${Math.random()*255}, ${Math.random()*50}, ${Math.random()*100})`;
    
    // Random chance for a more dramatic flash
    if (Math.random() < 0.3) {
      overlay.style.backgroundImage = `radial-gradient(circle, rgba(255,0,0,0.7) ${Math.random()*30}%, rgba(0,0,0,0.8) ${Math.random()*70 + 30}%)`;
    }
    
    // Reset after a short delay
    setTimeout(() => {
      overlay.style.backgroundColor = '#000033';
      overlay.style.backgroundImage = 'none';
    }, 100);
  },
  
  // Shake and distort the text
  shakeText() {
    const text = this.elements.text;
    
    // Random distortion values
    const skewX = Math.random() * 20 - 10;
    const skewY = Math.random() * 20 - 10;
    const scale = 0.8 + Math.random() * 0.5;
    
    // Apply distortion
    text.style.transform = `translate(${-50 + (Math.random()*20-10)}%, ${-50 + (Math.random()*20-10)}%) skew(${skewX}deg, ${skewY}deg) scale(${scale})`;
    text.style.color = Math.random() > 0.5 ? '#FF00FF' : '#00FFFF';
    text.style.letterSpacing = `${Math.random() * 10 - 5}px`;
    
    // Reset after a short delay
    setTimeout(() => {
      text.style.transform = 'translate(-50%, -50%)';
      text.style.color = '#FF0000';
      text.style.letterSpacing = 'normal';
    }, 150);
  },
  
  // Change the displayed message
  changeMessage() {
    const text = this.elements.text;
    
    // Random message from the array
    text.textContent = this.content.glitchMessages[
      Math.floor(Math.random() * this.content.glitchMessages.length)
    ];
    
    // Random chance to show backwards text
    if (Math.random() < 0.2) {
      text.style.transform += ' scaleX(-1)';
      setTimeout(() => {
        text.style.transform = 'translate(-50%, -50%)';
      }, 200);
    }
  },
  
  // Add horizontal static lines
  addGlitchLine() {
    const overlay = this.elements.overlay;
    
    // Random line properties
    const lineHeight = Math.floor(Math.random() * 5) + 1;
    const yPos = Math.floor(Math.random() * 100);
    
    // Create line element
    const line = document.createElement('div');
    Object.assign(line.style, {
      position: 'absolute',
      left: '0',
      top: `${yPos}%`,
      width: '100%',
      height: `${lineHeight}px`,
      backgroundColor: Math.random() > 0.5 ? '#FFFFFF' : '#00FFFF',
      opacity: '0.7',
      zIndex: '10000'
    });
    
    // Add and remove after delay
    overlay.appendChild(line);
    setTimeout(() => {
      overlay.removeChild(line);
    }, 200);
  },
  
  // Add static noise effect
  addStaticNoise() {
    const overlay = this.elements.overlay;
    
    // Create noise element
    const noise = document.createElement('div');
    Object.assign(noise.style, {
      position: 'absolute',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: 'transparent',
      opacity: '0.1',
      pointerEvents: 'none'
    });
    
    // Create a stippled effect for "static"
    let stipple = '';
    for (let i = 0; i < 200; i++) {
      const size = Math.floor(Math.random() * 3) + 1;
      stipple += `${Math.random() * 100}% ${Math.random() * 100}% 0 ${size}px #FFFFFF, `;
    }
    stipple = stipple.slice(0, -2); // Remove trailing comma and space
    
    noise.style.boxShadow = stipple;
    overlay.appendChild(noise);
    
    // Remove after delay
    setTimeout(() => {
      overlay.removeChild(noise);
    }, 150);
  },
  
  // Flash subtext at the bottom
  flashSubtext() {
    const overlay = this.elements.overlay;
    
    // Create subtext element
    const subtext = document.createElement('div');
    subtext.textContent = this.content.subtextMessages[
      Math.floor(Math.random() * this.content.subtextMessages.length)
    ];
    
    // Style the subtext
    Object.assign(subtext.style, {
      position: 'absolute',
      bottom: '10%',
      left: '50%',
      transform: 'translateX(-50%)',
      color: '#FF0000',
      fontSize: '1.2em',
      fontFamily: 'monospace',
      opacity: '0',
      transition: 'opacity 0.1s'
    });
    
    // Add and animate
    overlay.appendChild(subtext);
    
    setTimeout(() => {
      subtext.style.opacity = '0.8';
      setTimeout(() => {
        subtext.style.opacity = '0';
        setTimeout(() => {
          overlay.removeChild(subtext);
        }, 100);
      }, 200);
    }, 20);
  }
};

// Initialize the death system
$(document).ready(function() {
  DeathSystem.init();
});



:: StoryStylesheet [stylesheet]
/* Advanced 90s Cyberpunk Twine Stylesheet - Optimized Version */

/* ---------- CORE ELEMENTS & LAYOUT ---------- */
body {
    background-color: #000033;
    color: #00FF00;
    font-family: "Courier New", monospace;
    margin: 0;
    padding: 20px 40px 80px 40px; /* top right bottom left - increased side margins */
    line-height: 1.6;
}

#story {
    background-color: #000000;
    color: #00FF00;
    max-width: 900px; /* Increased max-width */
    margin: 20px auto 60px auto; /* Added top margin */
    padding: 30px; /* Increased padding */
    border: 5px solid #00FF00;
    box-shadow: 0 0 20px #00FF00;
    position: relative;
    animation: digital-noise 24s infinite linear;
}

.passage {
    background-color: #000000;
    color: #00FF00;
    padding: 20px 30px; /* Increased padding, especially on sides */
    border-radius: 5px;
    position: relative;
    max-width: 800px; /* Add max-width to limit text line length */
    margin: 0 auto; /* Center content */
    line-height: 1.8; /* Increased line height for better readability */
    animation: 
        text-distortion 20s infinite linear,
        horizontal-shift 24s infinite linear,
        color-shift 24s infinite linear,
        flicker 24s infinite linear;
}

/* Terminal headers */
.passage::before {
    content: "// AZURE COVE NETWORK TERMINAL //";
    display: block;
    background-color: #00FF00;
    color: #000000;
    padding: 8px; /* Increased padding */
    text-align: center;
    margin-bottom: 20px; /* Increased margin */
    font-family: monospace;
    font-weight: bold; /* Added for better visibility */
    position: relative;
    z-index: 2;
    border-radius: 3px; /* Subtle rounded corners */
}

.passage::after {
    content: "XIMENSIONAL RESEARCH NODE - COURTESY OF LUXY© 1997-20xx || ALL RIGHTS RESERVED.";
    display: block;
    background-color: #00FF00;
    color: #000000;
    padding: 5px;
    text-align: center;
    margin-top: 5px;
    font-family: monospace;
    font-size: 10px;
    position: relative;
    z-index: 1;
}

/* Links */
.passage a {
    color: #00FFFF;
    text-decoration: none;
    font-weight: bold;
    transition: all 0.3s ease;
    padding: 3px 8px; /* Increased padding */
    border: 1px dotted #00FFFF;
    margin: 3px 5px; /* Increased margin, especially horizontal */
    display: inline-block;
    border-radius: 2px; /* Subtle rounded corners */
}

.passage a:hover {
    color: #FF00FF;
    background-color: #00004B;
    text-decoration: none;
    transform: scale(1.05);
}

/* Blockquotes */
blockquote {
    border-left: 4px solid #00FFFF;
    background-color: #000033;
    margin: 1.5em 10px; /* Increased margins */
    padding: 1em 1.5em; /* Increased padding */
    color: #00FF00;
    font-style: italic;
    position: relative;
    overflow: hidden;
    border-radius: 0 5px 5px 0; /* Rounded right corners */
}

blockquote::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background-color: #00FFFF;
    box-shadow: 0 0 15px 2px #00FFFF;
}

blockquote::after {
    content: ">>>";
    position: absolute;
    left: 10px;
    top: 0.5em;
    color: #FF00FF;
    font-family: 'Courier New', monospace;
    font-weight: bold;
    font-style: normal;
}

blockquote p {
    margin-left: 25px; /* Increased margin */
    line-height: 1.7; /* Better line spacing for quoted text */
}

/* Scrollbar */
\::-webkit-scrollbar {
    width: 12px;
}

\::-webkit-scrollbar-track {
    background: #000033;
}

\::-webkit-scrollbar-thumb {
    background: #00FF00;
    border-radius: 10px;
}

\::-webkit-scrollbar-thumb:hover {
    background: #FF00FF;
}

/* ---------- SCROLLING BANNERS ---------- */
.banner-container-1 {
    position: fixed;
    bottom: 40px;
    left: 0;
    width: 100%;
    background-color: #000033;
    border-top: 2px solid #00FFFF;
    border-bottom: 2px solid #00FFFF;
    overflow: hidden;
    height: 25px;
    z-index: 1000;
}

.banner-container-2 {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #000033;
    border-top: 2px solid #FF00FF;
    border-bottom: 2px solid #FF00FF;
    overflow: hidden;
    height: 25px;
    z-index: 1000;
}

.banner-text-1 {
    display: inline-block;
    white-space: nowrap;
    animation: scroll-left 38s linear infinite;
    color: #00FFFF;
    font-family: "Courier New", monospace;
    line-height: 25px;
    padding-left: 100%;
}

.banner-text-2 {
    display: inline-block;
    white-space: nowrap;
    animation: scroll-right 34s linear infinite;
    color: #FF00FF;
    font-family: "Courier New", monospace;
    line-height: 25px;
    padding-right: 100%;
}

/* ---------- GLITCH ANIMATIONS ---------- */
/* Primary text distortion */
@keyframes text-distortion {
    0%, 97% { 
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        text-shadow: none;
        color: #00FF00;
    }
    97.2% { 
        clip-path: polygon(0 10%, 100% 0, 100% 100%, 0 90%);
        text-shadow: 3px 3px #4B0082, -3px -3px #2E8B57;
        color: #DC143C;
    }
    97.4% { 
        clip-path: polygon(0 0, 100% 0, 90% 100%, 0 100%);
        text-shadow: 4px 4px #9400D3, -4px -4px #00FF00;
        color: #B22222;
    }
    97.6% {
        clip-path: polygon(10% 0, 100% 10%, 90% 100%, 0 90%);
        text-shadow: 3px 3px #4B0082, -3px -3px #32CD32;
        color: #8B0000;
    }
    97.8%, 100% { 
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        text-shadow: none;
        color: #00FF00;
    }
}

/* Horizontal shift glitch */
@keyframes horizontal-shift {
    0%, 99% { transform: translateX(0); }
    99.1%, 99.2% { transform: translateX(-10px); }
    99.3%, 99.4% { transform: translateX(15px); }
    99.5%, 100% { transform: translateX(0); }
}

/* Color glitch */
@keyframes color-shift {
    0%, 95% { filter: none; }
    95.5% { filter: hue-rotate(90deg) saturate(200%); }
    96% { filter: hue-rotate(180deg) saturate(300%); }
    96.5% { filter: hue-rotate(270deg) saturate(400%); }
    97%, 100% { filter: none; }
}

/* Flicker glitch */
@keyframes flicker {
    0%, 92% { opacity: 1; }
    92.1% { opacity: 0.3; }
    92.2% { opacity: 1; }
    92.3% { opacity: 0.3; }
    92.4% { opacity: 1; }
    92.5% { opacity: 0.3; }
    92.6%, 100% { opacity: 1; }
}

/* Digital noise */
@keyframes digital-noise {
    0%, 90% { background-image: none; }
    90.5% {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="5" height="5" fill="%2300FFFF" opacity="0.3"/><rect x="20" y="10" width="8" height="2" fill="%23FF00FF" opacity="0.3"/><rect x="40" y="30" width="3" height="8" fill="%2300FF00" opacity="0.3"/><rect x="60" y="60" width="6" height="4" fill="%23FFFF00" opacity="0.3"/><rect x="80" y="80" width="4" height="10" fill="%23FF0000" opacity="0.3"/></svg>');
        background-repeat: repeat;
    }
    91%, 100% { background-image: none; }
}

/* Terminal text overlay */
@keyframes terminal-text {
    0%, 85% { content: ""; }
    85.5% { 
        content: "SYSTEM MALFUNCTION";
        color: #FF0000;
        font-size: 12px;
        opacity: 0.7;
    }
    86% { 
        content: "RECALIBRATING";
        color: #FFFF00;
        font-size: 12px;
        opacity: 0.7;
    }
    86.5% { 
        content: "SIGNAL RESTORED";
        color: #00FF00;
        font-size: 12px;
        opacity: 0.7;
    }
    87%, 100% { content: ""; }
}

/* Scanlines */
.passage > *::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
    background: repeating-linear-gradient(
        0deg,
        rgba(0, 0, 0, 0.03),
        rgba(0, 0, 0, 0.03) 1px,
        transparent 1px,
        transparent 2px
    );
    opacity: 0.5;
}

/* Random terminal message */
#story::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: "Courier New", monospace;
    text-align: center;
    z-index: 10;
    font-size: 25px;
    pointer-events: none;
    animation: terminal-text 13s infinite linear;
}

/* Banner animations */
@keyframes scroll-left {
    0% { transform: translateX(100%); }
    100% { transform: translateX(-100%); }
}

@keyframes scroll-right {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

/* ---------- TEXT EFFECT CLASSES ---------- */
/* Base class for all glitchy text */
.glitch-text {
    position: relative;
    display: inline-block;
    color: #00FFFF;
    font-family: 'Courier New', monospace;
    letter-spacing: .5px;
}

/* Twitching Text */
.twitch {
    animation: text-twitch 0.2s infinite alternate;
}

@keyframes text-twitch {
    0% { transform: translateX(0); }
    25% { transform: translateX(-1px); }
    50% { transform: translateX(0); }
    75% { transform: translateX(1px); }
    100% { transform: translateX(0); }
}

/* Distorted Text */
.distort {
    animation: text-distort 2s infinite;
    text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00;
}

@keyframes text-distort {
    0% { text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00; }
    25% { text-shadow: -2px 0 #FF00FF, 2px 0 #00FF00; }
    50% { text-shadow: 1px 0 #FF0000, -1px 0 #0000FF; }
    75% { text-shadow: -1px 0 #FF0000, 1px 0 #0000FF; }
    100% { text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00; }
}

/* Digital Decay */
.decay {
    animation: text-decay 3s infinite;
}

@keyframes text-decay {
    0%, 100% { opacity: 1; }
    35% { opacity: 1; }
    35.5% { opacity: 0.7; }
    36% { opacity: 1; }
    75% { opacity: 1; }
    75.5% { opacity: 0.8; }
    76% { opacity: 1; }
    76.5% { opacity: 0.6; }
    77% { opacity: 1; }
}

/* Warped Text */
.warp {
    animation: text-warp 5s infinite alternate;
}

@keyframes text-warp {
    0% { letter-spacing: 1px; }
    25% { letter-spacing: 2px; }
    50% { letter-spacing: 0px; }
    75% { letter-spacing: 2.5px; }
    100% { letter-spacing: 1px; }
}

/* Corrupted Text */
.corrupt {
    position: relative;
    color: #FFFFFF;
}

.corrupt::before,
.corrupt::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.corrupt::before {
    animation: glitch-effect-1 3s infinite;
    color: #00FFFF;
    z-index: -1;
}

.corrupt::after {
    animation: glitch-effect-2 2s infinite;
    color: #FF00FF;
    z-index: -2;
}

@keyframes glitch-effect-1 {
    0%, 100% { clip-path: inset(50% 0 50% 0); }
    5%, 15% { clip-path: inset(0% 0 85% 0); }
    20%, 30% { clip-path: inset(80% 0 5% 0); }
    35%, 45% { clip-path: inset(30% 0 55% 0); }
    50%, 60% { clip-path: inset(70% 0 30% 0); }
    65%, 75% { clip-path: inset(15% 0 75% 0); }
    80%, 90% { clip-path: inset(55% 0 20% 0); }
    95%, 99% { clip-path: inset(40% 0 60% 0); }
}

@keyframes glitch-effect-2 {
    0%, 100% { clip-path: inset(50% 0 50% 0); }
    5%, 15% { clip-path: inset(20% 0 60% 0); }
    20%, 30% { clip-path: inset(60% 0 10% 0); }
    35%, 45% { clip-path: inset(10% 0 80% 0); }
    50%, 60% { clip-path: inset(40% 0 40% 0); }
    65%, 75% { clip-path: inset(70% 0 15% 0); }
    80%, 90% { clip-path: inset(15% 0 45% 0); }
    95%, 99% { clip-path: inset(50% 0 35% 0); }
}

/* Combined effects */
.malfunction {
    animation: 
        text-twitch 0.2s infinite alternate,
        text-distort 2s infinite,
        text-decay 3s infinite;
}

/* ---------- ADDITIONAL TEXT EFFECTS ---------- */
/* Shake effect */
.shake-text {
    display: inline-block;
    animation: shake 4.5s infinite;
}

@keyframes shake {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    10%, 30%, 50%, 70%, 90% { transform: translate(-1px, 0) rotate(-1deg); }
    20%, 40%, 60%, 80% { transform: translate(1px, 0) rotate(1deg); }
}

/* Grow effect */
.grow-text {
    display: inline-block;
    animation: grow 7s forwards infinite;
    transform-origin: center;
}

@keyframes grow {
    0% { transform: scale(0); }
    100% { transform: scale(1); }
}

/* Bounce effect */
.bounce-text {
    display: inline-block;
    animation: bounce 2.5s forwards infinite;
}

@keyframes bounce {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
}

/* Pulse effect */
.pulse-text {
    display: inline-block;
    animation: pulse 4.5s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

/* Caterpillar effect */
.caterpillar-text {
    display: inline-block;
    animation: caterpillar-move 4s infinite;
    transform-origin: center;
}

@keyframes caterpillar-move {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    25% { transform: translateY(-3px) rotate(-2deg); }
    50% { transform: translateY(0) rotate(2deg); }
    75% { transform: translateY(3px) rotate(-2deg); }
}

/* ---------- SPECIALIZED EFFECTS ---------- */
/* Static Text Effect */
.static-text {
    display: inline-block;
    color: #00FF00;
    font-family: 'Courier New', monospace;
    position: relative;
    font-weight: bold;
    text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5);
    letter-spacing: 0.5px;
    padding: 0 1px;
    z-index: 1;
    opacity: 1 !important;
    animation: 
        static-flicker 2.5s infinite linear,
        static-shift 4s infinite alternate;
    background-image: 
        url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-size: 100px 100px;
    background-repeat: repeat;
    mix-blend-mode: soft-light;
}

.static-text::before {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: rgba(255, 0, 255, 0.3);
    z-index: -1;
    text-shadow: none;
    opacity: 0.3;
    animation: static-shift-alt 5s infinite alternate;
}

.static-text::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        linear-gradient(rgba(0, 255, 0, 0.03) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.03) 1px, transparent 1px);
    background-size: 2px 2px, 2px 2px;
    animation: pixel-noise 4s linear infinite;
    pointer-events: none;
    z-index: -1;
    mix-blend-mode: overlay;
}

@keyframes static-flicker {
    0% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    25% { opacity: 0.98; text-shadow: 0 0 2px #00FF00, 0 0 4px rgba(0, 255, 0, 0.4); }
    35% { opacity: 0.97; text-shadow: 0 0 3px #00FFFF, 0 0 4px rgba(0, 255, 255, 0.3); }
    45% { opacity: 0.99; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    60% { opacity: 0.98; text-shadow: 0 0 3px #FFFFFF, 0 0 6px rgba(0, 255, 0, 0.4); }
    75% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    85% { opacity: 0.96; text-shadow: 0 0 3px #00FFFF, 0 0 4px rgba(0, 255, 255, 0.4); }
    100% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
}

@keyframes static-shift {
    0% { transform: translateX(-0.5px) translateY(0px); }
    33% { transform: translateX(0px) translateY(0.5px); }
    66% { transform: translateX(0.5px) translateY(-0.5px); }
    100% { transform: translateX(-0.5px) translateY(0px); }
}

@keyframes static-shift-alt {
    0% { transform: translateX(-0.8px) translateY(0.3px); }
    50% { transform: translateX(0.5px) translateY(-0.4px); }
    100% { transform: translateX(-0.5px) translateY(0.5px); }
}

@keyframes pixel-noise {
    0% { opacity: 0.15; background-position: 0px 0px, 0px 0px; }
    25% { opacity: 0.2; background-position: 0.5px 0.5px, 0.5px 0.5px; }
    50% { opacity: 0.25; background-position: 1px 1px, 1px 1px; }
    75% { opacity: 0.2; background-position: 0.5px 0.5px, 0.5px 0.5px; }
    100% { opacity: 0.15; background-position: 0px 0px, 0px 0px; }
}

/* Static hover effects */
.static-text:hover {
    animation: 
        static-hover 0.2s infinite steps(2),
        glitch-skew 0.5s infinite alternate-reverse;
    background-image: 
        url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.4' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-size: 100px 100px;
    mix-blend-mode: hard-light;
    transform-origin: center;
}

@keyframes static-hover {
    0% { color: #00FF00; text-shadow: 0 0 5px #00FF00, 0 0 10px rgba(0, 255, 0, 0.8); }
    33% { color: #00FFFF; text-shadow: 0 0 8px #00FFFF, 0 0 12px rgba(0, 255, 255, 0.9); }
    66% { color: #FF00FF; text-shadow: 0 0 8px #FF00FF, 0 0 12px rgba(255, 0, 255, 0.9); }
    100% { color: #FFFFFF; text-shadow: 0 0 10px #FFFFFF, 0 0 15px rgba(255, 255, 255, 1); }
}

@keyframes glitch-skew {
    0% { transform: skew(0deg, 0deg); }
    25% { transform: skew(2deg, 0deg); }
    50% { transform: skew(0deg, 1deg); }
    75% { transform: skew(-2deg, 0deg); }
    100% { transform: skew(0deg, -1deg); }
}

.static-text:hover:before {
    animation: noise-animation 0.1s infinite linear alternate-reverse;
    opacity: 0.5;
    color: rgba(255, 255, 0, 0.8);
    left: -1px;
    top: 1px;
}

.static-text:hover:after {
    animation: pixel-noise-extreme 0.2s steps(2) infinite;
    background-image: 
        linear-gradient(rgba(255, 0, 0, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 4px 4px, 4px 4px;
    mix-blend-mode: screen;
}

@keyframes pixel-noise-extreme {
    0% { opacity: 0.4; background-position: 0px 0px, 0px 0px; }
    25% { opacity: 0.5; background-position: 1px 1px, 2px -1px; }
    50% { opacity: 0.6; background-position: -2px 2px, 1px 2px; }
    75% { opacity: 0.5; background-position: 3px 0px, -2px -2px; }
    100% { opacity: 0.4; background-position: 0px 0px, 0px 0px; }
}

@keyframes noise-animation {
    0% { clip-path: inset(40% 0 61% 0); }
    20% { clip-path: inset(54% 0 7% 0); }
    40% { clip-path: inset(15% 0 75% 0); }
    60% { clip-path: inset(71% 0 22% 0); }
    80% { clip-path: inset(75% 0 19% 0); }
    100% { clip-path: inset(60% 0 17% 0); }
}

/* Loopy Text Animation */
.loopy-container {
    display: inline-block;
    color: #00FFFF;
    font-family: 'Courier New', monospace;
    letter-spacing: 2px;
}

.loopy-letter {
    display: inline-block;
    position: relative;
    animation: loopy-twist 9s infinite cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    transform-style: preserve-3d;
}

@keyframes loopy-twist {
    0%, 100% {
        transform: rotateY(0deg) rotateX(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    10% {
        transform: rotateY(120deg) rotateX(10deg) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    20% {
        transform: rotateY(240deg) rotateX(20deg) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    30% {
        transform: rotateY(360deg) rotateX(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    40% {
        transform: rotateX(120deg) rotateY(10deg) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    50% {
        transform: rotateX(240deg) rotateY(20deg) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    60% {
        transform: rotateX(360deg) rotateY(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    70% {
        transform: rotateZ(120deg) scale(1.2) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    80% {
        transform: rotateZ(240deg) scale(0.8) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    
    90% {
        transform: rotateZ(360deg) scale(1) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
}

.loopy-letter::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at center,
        rgba(0, 255, 255, 0.2) 0%,
        transparent 70%
    );
    filter: blur(5px);
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none;
    z-index: -1;
    animation: loopy-glow 9s infinite;
}

@keyframes loopy-glow {
    0%, 30%, 60%, 90%, 100% { opacity: 0; }
    15%, 45%, 75% { opacity: 1; }
}

/* ASCII Art */
.ascii-triquetra {
    font-family: monospace;
    color: #00FFFF;
    text-shadow: 0 0 5px #00FFFF;
    font-size: 10px;
    white-space: pre;
    line-height: 1.2;
    text-align: center;
    display: inline-block;
    animation: ascii-glow 4s infinite alternate;
}

@keyframes ascii-glow {
    0%, 100% { color: #00FFFF; text-shadow: 0 0 5px #00FFFF; }
    33% { color: #FF00FF; text-shadow: 0 0 5px #FF00FF; }
    66% { color: #FFFF00; text-shadow: 0 0 5px #FFFF00; }
}

/* ---------- FLASHING EFFECTS ---------- */
/* Simple Flash Effect */
.flash-text {
    animation: flash 1s infinite;
}

@keyframes flash {
    0%, 49% { opacity: 1; }
    50%, 100% { opacity: 0; }
}

/* Colored Flash Effect */
.colored-flash {
    animation: colored-flash 2s infinite;
}

@keyframes colored-flash {
    0%, 24% { color: #00FF00; }
    25%, 49% { color: #FF00FF; }
    50%, 74% { color: #00FFFF; }
    75%, 100% { color: #FFFF00; }
}

/* Glitchy Flash Effect */
.glitch-flash {
    position: relative;
    display: inline-block;
    animation: glitch-flash 3s infinite;
    text-shadow: 0 0 5px;
}

@keyframes glitch-flash {
    0%, 100% { 
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    10% {
        opacity: 0.8;
        color: #FF00FF;
        text-shadow: 2px 0 #00FFFF;
        transform: translateX(2px);
    }
    
    10.5% { opacity: 0.2; }
    
    11% {
        opacity: 1;
        color: #00FF00;
        text-shadow: -2px 0 #FF00FF;
        transform: translateX(-1px);
    }
    
    40% {
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    40.5% {
        opacity: 0.3;
        color: #00FFFF;
        text-shadow: 3px 0 #FFFF00;
        transform: translateX(-3px);
    }
    
    41% { opacity: 0.7; }
    
    41.5% {
        opacity: 1;
        color: #FFFF00;
        text-shadow: -3px 0 #00FF00;
        transform: translateX(2px);
    }
    
    80% {
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    80.5% {
        opacity: 0.5;
        color: #FF00FF;
        text-shadow: -2px 0 #00FFFF;
        transform: translateX(2px);
    }
    
    81% { opacity: 0.1; }
    
    81.5% {
        opacity: 1;
        color: #00FF00;
        text-shadow: 2px 0 #FF00FF;
        transform: translateX(-1px);
    }
}

/* M'RKATH'NEB Entity Effect */
.mrkath-flash {
    animation: mrkath-flash 4s infinite;
    position: relative;
}

@keyframes mrkath-flash {
    0%, 100% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    24% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    25% {
        color: #000000;
        text-shadow: 0 0 10px #FF00FF;
        transform: scale(1.1) translateY(-2px);
    }
    
    26% {
        color: #FF00FF;
        text-shadow: 0 0 15px #00FFFF;
        transform: scale(0.9) translateY(2px);
    }
    
    27% {
        color: #00FFFF;
        text-shadow: 0 0 10px #FFFF00;
        transform: scale(1.05) translateX(3px);
    }
    
    28% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    49% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    50% {
        color: #000000;
        text-shadow: 0 0 10px #00FFFF;
        transform: scale(1.1) translateX(-2px);
    }
    
    51% {
        color: #00FFFF;
        text-shadow: 0 0 15px #FF00FF;
        transform: scale(0.9) translateX(2px);
    }
    
    52% {
        color: #FF00FF;
        text-shadow: 0 0 10px #FFFF00;
        transform: scale(1.05) translateY(3px);
    }
    
    53% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    74% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    75% {
        color: #FFFF00;
        text-shadow: 0 0 20px #FFFF00;
        transform: scale(1.15) rotate(1deg);
    }
    
    76% {
        color: #000000;
        text-shadow: 0 0 15px #FF00FF;
        transform: scale(0.85) rotate(-1deg);
    }
    
    77% {
        color: #00FFFF;
        text-shadow: 0 0 10px #00FFFF;
        transform: scale(1.05);
    }
    
    78% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
}

/* ---------- TOOLTIP SYSTEM ---------- */
.tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted #00FFFF;
    color: #00FFFF;
    cursor: help;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 300px;
    background-color: rgba(0, 0, 0, 0.9);
    color: #00FF00;
    text-align: left;
    border: 1px solid #00FFFF;
    box-shadow: 0 0 10px #00FFFF;
    padding: 10px;
    border-radius: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -150px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip .tooltiptext.below {
    bottom: auto;
    top: 125%;
}

.tooltip .tooltiptext::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #00FFFF transparent transparent transparent;
}

.tooltip .tooltiptext.below::after {
    top: auto;
    bottom: 100%;
    border-color: transparent transparent #00FFFF transparent;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
}

.tooltip:hover {
    animation: tooltip-glitch 1s infinite;
}

@keyframes tooltip-glitch {
    0%, 100% { text-shadow: 0 0 2px #00FFFF; }
    33% { text-shadow: -1px 0 #FF00FF, 1px 0 #00FFFF; }
    66% { text-shadow: 1px 0 #FF00FF, -1px 0 #00FFFF; }
}

/* ---------- SPECIAL ENTITY EFFECTS ---------- */
/* Zure Diamond Animation */
@keyframes zure-diamond-spin {
    0% { transform: translate(-50%, -50%) rotate(45deg) scale(1); }
    50% { transform: translate(-50%, -50%) rotate(225deg) scale(1.2); }
    100% { transform: translate(-50%, -50%) rotate(405deg) scale(1); }
}

/* Creating the octahedron structure using pseudo-elements */
#zure-diamond {
    /* Base properties remain unchanged */
    transform-style: preserve-3d;
    perspective: 800px;
}

/* Top pyramid of octahedron */
#zure-diamond::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 50%;
    background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(200,200,255,0.2));
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%); /* Front triangle */
    transform-origin: bottom center;
    transform: rotateY(0deg);
    box-shadow: 0 0 10px rgba(200, 200, 255, 0.8);
}

/* Bottom pyramid of octahedron */
#zure-diamond::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(180,180,255,0.7);
    clip-path: polygon(0% 0%, 100% 0%, 50% 100%); /* Front triangle */
    transform-origin: top center;
    transform: rotateY(0deg);
    box-shadow: 0 0 10px rgba(200, 200, 255, 0.8);
}

/* Lux Effect - Elegant but glitchy with gold and cyan */
.lux-text {
    position: relative;
    text-align: right;
    display: block;
    width: 100%;
    color: #FFD700;
    font-family: 'Times New Roman', serif;
    letter-spacing: 1px;
    font-style: italic;
    text-shadow: 0 0 5px #FFD700;
    animation: lux-flicker 4s infinite cubic-bezier(0.42, 0, 0.58, 1);
    margin: 0.5em 0;
}

@keyframes lux-flicker {
    0%, 100% { 
        color: #FFD700; 
        text-shadow: 0 0 5px #FFD700;
        transform: scale(1);
    }
    
    25% {
        color: #00FFFF; 
        text-shadow: 0 0 8px #00FFFF, 0 0 12px #00FFFF;
        transform: scale(1.02) translateX(1px);
    }
    
    26% {
        color: #FFFFFF;
        text-shadow: 0 0 10px #FFFFFF;
    }
    
    27% {
        color: #00FFFF;
        text-shadow: 0 0 8px #00FFFF;
        transform: scale(0.98) translateX(-1px);
    }
    
    50% {
        color: #FFD700; 
        text-shadow: 0 0 5px #FFD700;
        transform: scale(1);
    }
    
    75% {
        color: #FF00FF; 
        text-shadow: 0 0 8px #FF00FF, 0 0 12px #FF00FF;
        transform: scale(1.02) translateY(-1px);
    }
    
    76% {
        color: #FFFFFF;
        text-shadow: 0 0 10px #FFFFFF;
    }
    
    77% {
        color: #FF00FF;
        text-shadow: 0 0 8px #FF00FF;
        transform: scale(0.98) translateY(1px);
    }
}

.lux-text::before {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: rgba(255, 215, 0, 0.5);
    z-index: -1;
    animation: lux-shimmer 6s linear infinite;
}

@keyframes lux-shimmer {
    0% { transform: translateX(-2px) translateY(1px); opacity: 0.3; }
    25% { transform: translateX(1px) translateY(-1px); opacity: 0.6; }
    50% { transform: translateX(2px) translateY(1px); opacity: 0.3; }
    75% { transform: translateX(-1px) translateY(-1px); opacity: 0.6; }
    100% { transform: translateX(-2px) translateY(1px); opacity: 0.3; }
}

.lux-text::after {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: #00FFFF;
    z-index: -2;
    clip-path: inset(0 0 0 0);
    animation: lux-glitch 8s infinite;
}

@keyframes lux-glitch {
    0%, 91%, 100% { clip-path: inset(100% 0 0 0); transform: translateX(0); }
    92% { clip-path: inset(20% 0 40% 0); transform: translateX(2px); }
    93% { clip-path: inset(60% 0 20% 0); transform: translateX(-2px); }
    94% { clip-path: inset(0 0 80% 0); transform: translateX(1px); }
    95% { clip-path: inset(100% 0 0 0); transform: translateX(0); }
}

.lux-text:hover {
    animation: lux-hover 1s infinite;
    text-shadow: 0 0 10px #FFD700, 0 0 15px #FFD700;
}

@keyframes lux-hover {
    0%, 100% { color: #FFD700; transform: scale(1.05); }
    50% { color: #FFFFFF; text-shadow: 0 0 15px #FFFFFF, 0 0 20px #FFFFFF; transform: scale(1.1); }
}

/* ---------- GLITCH ANIMATIONS ---------- */
/* Primary text distortion */
@keyframes text-distortion {
    0%, 97% { 
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        text-shadow: none;
        color: #00FF00;
    }
    97.2% { 
        clip-path: polygon(0 10%, 100% 0, 100% 100%, 0 90%);
        text-shadow: 3px 3px #4B0082, -3px -3px #2E8B57;
        color: #DC143C;
    }
    97.4% { 
        clip-path: polygon(0 0, 100% 0, 90% 100%, 0 100%);
        text-shadow: 4px 4px #9400D3, -4px -4px #00FF00;
        color: #B22222;
    }
    97.6% {
        clip-path: polygon(10% 0, 100% 10%, 90% 100%, 0 90%);
        text-shadow: 3px 3px #4B0082, -3px -3px #32CD32;
        color: #8B0000;
    }
    97.8%, 100% { 
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
        text-shadow: none;
        color: #00FF00;
    }
}

/* Horizontal shift glitch */
@keyframes horizontal-shift {
    0%, 99% { transform: translateX(0); }
    99.1%, 99.2% { transform: translateX(-10px); }
    99.3%, 99.4% { transform: translateX(15px); }
    99.5%, 100% { transform: translateX(0); }
}

/* Color glitch */
@keyframes color-shift {
    0%, 95% { filter: none; }
    95.5% { filter: hue-rotate(90deg) saturate(200%); }
    96% { filter: hue-rotate(180deg) saturate(300%); }
    96.5% { filter: hue-rotate(270deg) saturate(400%); }
    97%, 100% { filter: none; }
}

/* Flicker glitch */
@keyframes flicker {
    0%, 92% { opacity: 1; }
    92.1% { opacity: 0.3; }
    92.2% { opacity: 1; }
    92.3% { opacity: 0.3; }
    92.4% { opacity: 1; }
    92.5% { opacity: 0.3; }
    92.6%, 100% { opacity: 1; }
}

/* Digital noise */
@keyframes digital-noise {
    0%, 90% { background-image: none; }
    90.5% {
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect x="0" y="0" width="5" height="5" fill="%2300FFFF" opacity="0.3"/><rect x="20" y="10" width="8" height="2" fill="%23FF00FF" opacity="0.3"/><rect x="40" y="30" width="3" height="8" fill="%2300FF00" opacity="0.3"/><rect x="60" y="60" width="6" height="4" fill="%23FFFF00" opacity="0.3"/><rect x="80" y="80" width="4" height="10" fill="%23FF0000" opacity="0.3"/></svg>');
        background-repeat: repeat;
    }
    91%, 100% { background-image: none; }
}

/* Terminal text overlay */
@keyframes terminal-text {
    0%, 85% { content: ""; }
    85.5% { 
        content: "SYSTEM MALFUNCTION";
        color: #FF0000;
        font-size: 12px;
        opacity: 0.7;
    }
    86% { 
        content: "RECALIBRATING";
        color: #FFFF00;
        font-size: 12px;
        opacity: 0.7;
    }
    86.5% { 
        content: "SIGNAL RESTORED";
        color: #00FF00;
        font-size: 12px;
        opacity: 0.7;
    }
    87%, 100% { content: ""; }
}

/* Scanlines */
.passage > *::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
    background: repeating-linear-gradient(
        0deg,
        rgba(0, 0, 0, 0.03),
        rgba(0, 0, 0, 0.03) 1px,
        transparent 1px,
        transparent 2px
    );
    opacity: 0.5;
}

/* Random terminal message */
#story::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-family: "Courier New", monospace;
    text-align: center;
    z-index: 10;
    font-size: 25px;
    pointer-events: none;
    animation: terminal-text 13s infinite linear;
}

/* Banner animations */
@keyframes scroll-left {
    0% { transform: translateX(100%); }
    100% { transform: translateX(-100%); }
}

@keyframes scroll-right {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

/* ---------- TEXT EFFECT CLASSES ---------- */
/* Base class for all glitchy text */
.glitch-text {
    position: relative;
    display: inline-block;
    color: #00FFFF;
    font-family: 'Courier New', monospace;
    letter-spacing: .5px;
}

/* Twitching Text */
.twitch {
    animation: text-twitch 0.2s infinite alternate;
}

@keyframes text-twitch {
    0% { transform: translateX(0); }
    25% { transform: translateX(-1px); }
    50% { transform: translateX(0); }
    75% { transform: translateX(1px); }
    100% { transform: translateX(0); }
}

/* Distorted Text */
.distort {
    animation: text-distort 2s infinite;
    text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00;
}

@keyframes text-distort {
    0% { text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00; }
    25% { text-shadow: -2px 0 #FF00FF, 2px 0 #00FF00; }
    50% { text-shadow: 1px 0 #FF0000, -1px 0 #0000FF; }
    75% { text-shadow: -1px 0 #FF0000, 1px 0 #0000FF; }
    100% { text-shadow: 2px 0 #FF00FF, -2px 0 #00FF00; }
}

/* Digital Decay */
.decay {
    animation: text-decay 3s infinite;
}

@keyframes text-decay {
    0%, 100% { opacity: 1; }
    35% { opacity: 1; }
    35.5% { opacity: 0.7; }
    36% { opacity: 1; }
    75% { opacity: 1; }
    75.5% { opacity: 0.8; }
    76% { opacity: 1; }
    76.5% { opacity: 0.6; }
    77% { opacity: 1; }
}

/* Warped Text */
.warp {
    animation: text-warp 5s infinite alternate;
}

@keyframes text-warp {
    0% { letter-spacing: 1px; }
    25% { letter-spacing: 2px; }
    50% { letter-spacing: 0px; }
    75% { letter-spacing: 2.5px; }
    100% { letter-spacing: 1px; }
}

/* Corrupted Text */
.corrupt {
    position: relative;
    color: #FFFFFF;
}

.corrupt::before,
.corrupt::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.corrupt::before {
    animation: glitch-effect-1 3s infinite;
    color: #00FFFF;
    z-index: -1;
}

.corrupt::after {
    animation: glitch-effect-2 2s infinite;
    color: #FF00FF;
    z-index: -2;
}

@keyframes glitch-effect-1 {
    0%, 100% { clip-path: inset(50% 0 50% 0); }
    5%, 15% { clip-path: inset(0% 0 85% 0); }
    20%, 30% { clip-path: inset(80% 0 5% 0); }
    35%, 45% { clip-path: inset(30% 0 55% 0); }
    50%, 60% { clip-path: inset(70% 0 30% 0); }
    65%, 75% { clip-path: inset(15% 0 75% 0); }
    80%, 90% { clip-path: inset(55% 0 20% 0); }
    95%, 99% { clip-path: inset(40% 0 60% 0); }
}

@keyframes glitch-effect-2 {
    0%, 100% { clip-path: inset(50% 0 50% 0); }
    5%, 15% { clip-path: inset(20% 0 60% 0); }
    20%, 30% { clip-path: inset(60% 0 10% 0); }
    35%, 45% { clip-path: inset(10% 0 80% 0); }
    50%, 60% { clip-path: inset(40% 0 40% 0); }
    65%, 75% { clip-path: inset(70% 0 15% 0); }
    80%, 90% { clip-path: inset(15% 0 45% 0); }
    95%, 99% { clip-path: inset(50% 0 35% 0); }
}

/* Combined effects */
.malfunction {
    animation: 
        text-twitch 0.2s infinite alternate,
        text-distort 2s infinite,
        text-decay 3s infinite;
}

/* ---------- ADDITIONAL TEXT EFFECTS ---------- */
/* Shake effect */
.shake-text {
    display: inline-block;
    animation: shake 4.5s infinite;
}

@keyframes shake {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    10%, 30%, 50%, 70%, 90% { transform: translate(-1px, 0) rotate(-1deg); }
    20%, 40%, 60%, 80% { transform: translate(1px, 0) rotate(1deg); }
}

/* Grow effect */
.grow-text {
    display: inline-block;
    animation: grow 7s forwards infinite;
    transform-origin: center;
}

@keyframes grow {
    0% { transform: scale(0); }
    100% { transform: scale(1); }
}

/* Bounce effect */
.bounce-text {
    display: inline-block;
    animation: bounce 2.5s forwards infinite;
}

@keyframes bounce {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
}

/* Pulse effect */
.pulse-text {
    display: inline-block;
    animation: pulse 4.5s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

/* Caterpillar effect */
.caterpillar-text {
    display: inline-block;
    animation: caterpillar-move 4s infinite;
    transform-origin: center;
}

@keyframes caterpillar-move {
    0%, 100% { transform: translateY(0) rotate(0deg); }
    25% { transform: translateY(-3px) rotate(-2deg); }
    50% { transform: translateY(0) rotate(2deg); }
    75% { transform: translateY(3px) rotate(-2deg); }
}

/* ---------- SPECIALIZED EFFECTS ---------- */
/* Static Text Effect */
.static-text {
    display: inline-block;
    color: #00FF00;
    font-family: 'Courier New', monospace;
    position: relative;
    font-weight: bold;
    text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5);
    letter-spacing: 0.5px;
    padding: 0 1px;
    z-index: 1;
    opacity: 1 !important;
    animation: 
        static-flicker 2.5s infinite linear,
        static-shift 4s infinite alternate;
    background-image: 
        url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='1' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-size: 100px 100px;
    background-repeat: repeat;
    mix-blend-mode: soft-light;
}

.static-text::before {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: rgba(255, 0, 255, 0.3);
    z-index: -1;
    text-shadow: none;
    opacity: 0.3;
    animation: static-shift-alt 5s infinite alternate;
}

.static-text::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: 
        linear-gradient(rgba(0, 255, 0, 0.03) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.03) 1px, transparent 1px);
    background-size: 2px 2px, 2px 2px;
    animation: pixel-noise 4s linear infinite;
    pointer-events: none;
    z-index: -1;
    mix-blend-mode: overlay;
}

@keyframes static-flicker {
    0% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    25% { opacity: 0.98; text-shadow: 0 0 2px #00FF00, 0 0 4px rgba(0, 255, 0, 0.4); }
    35% { opacity: 0.97; text-shadow: 0 0 3px #00FFFF, 0 0 4px rgba(0, 255, 255, 0.3); }
    45% { opacity: 0.99; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    60% { opacity: 0.98; text-shadow: 0 0 3px #FFFFFF, 0 0 6px rgba(0, 255, 0, 0.4); }
    75% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
    85% { opacity: 0.96; text-shadow: 0 0 3px #00FFFF, 0 0 4px rgba(0, 255, 255, 0.4); }
    100% { opacity: 1; text-shadow: 0 0 2px #00FF00, 0 0 5px rgba(0, 255, 0, 0.5); }
}

@keyframes static-shift {
    0% { transform: translateX(-0.5px) translateY(0px); }
    33% { transform: translateX(0px) translateY(0.5px); }
    66% { transform: translateX(0.5px) translateY(-0.5px); }
    100% { transform: translateX(-0.5px) translateY(0px); }
}

@keyframes static-shift-alt {
    0% { transform: translateX(-0.8px) translateY(0.3px); }
    50% { transform: translateX(0.5px) translateY(-0.4px); }
    100% { transform: translateX(-0.5px) translateY(0.5px); }
}

@keyframes pixel-noise {
    0% { opacity: 0.15; background-position: 0px 0px, 0px 0px; }
    25% { opacity: 0.2; background-position: 0.5px 0.5px, 0.5px 0.5px; }
    50% { opacity: 0.25; background-position: 1px 1px, 1px 1px; }
    75% { opacity: 0.2; background-position: 0.5px 0.5px, 0.5px 0.5px; }
    100% { opacity: 0.15; background-position: 0px 0px, 0px 0px; }
}

/* Static hover effects */
.static-text:hover {
    animation: 
        static-hover 0.2s infinite steps(2),
        glitch-skew 0.5s infinite alternate-reverse;
    background-image: 
        url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.4' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
    background-size: 100px 100px;
    mix-blend-mode: hard-light;
    transform-origin: center;
}

@keyframes static-hover {
    0% { color: #00FF00; text-shadow: 0 0 5px #00FF00, 0 0 10px rgba(0, 255, 0, 0.8); }
    33% { color: #00FFFF; text-shadow: 0 0 8px #00FFFF, 0 0 12px rgba(0, 255, 255, 0.9); }
    66% { color: #FF00FF; text-shadow: 0 0 8px #FF00FF, 0 0 12px rgba(255, 0, 255, 0.9); }
    100% { color: #FFFFFF; text-shadow: 0 0 10px #FFFFFF, 0 0 15px rgba(255, 255, 255, 1); }
}

@keyframes glitch-skew {
    0% { transform: skew(0deg, 0deg); }
    25% { transform: skew(2deg, 0deg); }
    50% { transform: skew(0deg, 1deg); }
    75% { transform: skew(-2deg, 0deg); }
    100% { transform: skew(0deg, -1deg); }
}

.static-text:hover:before {
    animation: noise-animation 0.1s infinite linear alternate-reverse;
    opacity: 0.5;
    color: rgba(255, 255, 0, 0.8);
    left: -1px;
    top: 1px;
}

.static-text:hover:after {
    animation: pixel-noise-extreme 0.2s steps(2) infinite;
    background-image: 
        linear-gradient(rgba(255, 0, 0, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 4px 4px, 4px 4px;
    mix-blend-mode: screen;
}

@keyframes pixel-noise-extreme {
    0% { opacity: 0.4; background-position: 0px 0px, 0px 0px; }
    25% { opacity: 0.5; background-position: 1px 1px, 2px -1px; }
    50% { opacity: 0.6; background-position: -2px 2px, 1px 2px; }
    75% { opacity: 0.5; background-position: 3px 0px, -2px -2px; }
    100% { opacity: 0.4; background-position: 0px 0px, 0px 0px; }
}

@keyframes noise-animation {
    0% { clip-path: inset(40% 0 61% 0); }
    20% { clip-path: inset(54% 0 7% 0); }
    40% { clip-path: inset(15% 0 75% 0); }
    60% { clip-path: inset(71% 0 22% 0); }
    80% { clip-path: inset(75% 0 19% 0); }
    100% { clip-path: inset(60% 0 17% 0); }
}

/* Loopy Text Animation */
.loopy-container {
    display: inline-block;
    color: #00FFFF;
    font-family: 'Courier New', monospace;
    letter-spacing: 2px;
}

.loopy-letter {
    display: inline-block;
    position: relative;
    animation: loopy-twist 9s infinite cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: center;
    transform-style: preserve-3d;
}

@keyframes loopy-twist {
    0%, 100% {
        transform: rotateY(0deg) rotateX(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    10% {
        transform: rotateY(120deg) rotateX(10deg) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    20% {
        transform: rotateY(240deg) rotateX(20deg) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    30% {
        transform: rotateY(360deg) rotateX(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    40% {
        transform: rotateX(120deg) rotateY(10deg) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    50% {
        transform: rotateX(240deg) rotateY(20deg) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    60% {
        transform: rotateX(360deg) rotateY(0deg) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
    70% {
        transform: rotateZ(120deg) scale(1.2) translateZ(5px);
        color: #FF00FF;
        text-shadow: 0 0 5px #FF00FF;
    }
    80% {
        transform: rotateZ(240deg) scale(0.8) translateZ(10px);
        color: #FFFF00;
        text-shadow: 0 0 5px #FFFF00;
    }
    
    90% {
        transform: rotateZ(360deg) scale(1) translateZ(0);
        color: #00FFFF;
        text-shadow: 0 0 3px #00FFFF;
    }
}

.loopy-letter::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at center,
        rgba(0, 255, 255, 0.2) 0%,
        transparent 70%
    );
    filter: blur(5px);
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none;
    z-index: -1;
    animation: loopy-glow 9s infinite;
}

@keyframes loopy-glow {
    0%, 30%, 60%, 90%, 100% { opacity: 0; }
    15%, 45%, 75% { opacity: 1; }
}

/* ASCII Art */
.ascii-triquetra {
    font-family: monospace;
    color: #00FFFF;
    text-shadow: 0 0 5px #00FFFF;
    font-size: 10px;
    white-space: pre;
    line-height: 1.2;
    text-align: center;
    display: inline-block;
    animation: ascii-glow 4s infinite alternate;
}

@keyframes ascii-glow {
    0%, 100% { color: #00FFFF; text-shadow: 0 0 5px #00FFFF; }
    33% { color: #FF00FF; text-shadow: 0 0 5px #FF00FF; }
    66% { color: #FFFF00; text-shadow: 0 0 5px #FFFF00; }
}

/* ---------- FLASHING EFFECTS ---------- */
/* Simple Flash Effect */
.flash-text {
    animation: flash 1s infinite;
}

@keyframes flash {
    0%, 49% { opacity: 1; }
    50%, 100% { opacity: 0; }
}

/* Colored Flash Effect */
.colored-flash {
    animation: colored-flash 2s infinite;
}

@keyframes colored-flash {
    0%, 24% { color: #00FF00; }
    25%, 49% { color: #FF00FF; }
    50%, 74% { color: #00FFFF; }
    75%, 100% { color: #FFFF00; }
}

/* Glitchy Flash Effect */
.glitch-flash {
    position: relative;
    display: inline-block;
    animation: glitch-flash 3s infinite;
    text-shadow: 0 0 5px;
}

@keyframes glitch-flash {
    0%, 100% { 
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    10% {
        opacity: 0.8;
        color: #FF00FF;
        text-shadow: 2px 0 #00FFFF;
        transform: translateX(2px);
    }
    
    10.5% { opacity: 0.2; }
    
    11% {
        opacity: 1;
        color: #00FF00;
        text-shadow: -2px 0 #FF00FF;
        transform: translateX(-1px);
    }
    
    40% {
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    40.5% {
        opacity: 0.3;
        color: #00FFFF;
        text-shadow: 3px 0 #FFFF00;
        transform: translateX(-3px);
    }
    
    41% { opacity: 0.7; }
    
    41.5% {
        opacity: 1;
        color: #FFFF00;
        text-shadow: -3px 0 #00FF00;
        transform: translateX(2px);
    }
    
    80% {
        opacity: 1;
        text-shadow: none;
        transform: translateX(0);
    }
    
    80.5% {
        opacity: 0.5;
        color: #FF00FF;
        text-shadow: -2px 0 #00FFFF;
        transform: translateX(2px);
    }
    
    81% { opacity: 0.1; }
    
    81.5% {
        opacity: 1;
        color: #00FF00;
        text-shadow: 2px 0 #FF00FF;
        transform: translateX(-1px);
    }
}

/* M'RKATH'NEB Entity Effect */
.mrkath-flash {
    animation: mrkath-flash 4s infinite;
    position: relative;
}

@keyframes mrkath-flash {
    0%, 100% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    24% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    25% {
        color: #000000;
        text-shadow: 0 0 10px #FF00FF;
        transform: scale(1.1) translateY(-2px);
    }
    
    26% {
        color: #FF00FF;
        text-shadow: 0 0 15px #00FFFF;
        transform: scale(0.9) translateY(2px);
    }
    
    27% {
        color: #00FFFF;
        text-shadow: 0 0 10px #FFFF00;
        transform: scale(1.05) translateX(3px);
    }
    
    28% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    49% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    50% {
        color: #000000;
        text-shadow: 0 0 10px #00FFFF;
        transform: scale(1.1) translateX(-2px);
    }
    
    51% {
        color: #00FFFF;
        text-shadow: 0 0 15px #FF00FF;
        transform: scale(0.9) translateX(2px);
    }
    
    52% {
        color: #FF00FF;
        text-shadow: 0 0 10px #FFFF00;
        transform: scale(1.05) translateY(3px);
    }
    
    53% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
    
    74% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
    }
    
    75% {
        color: #FFFF00;
        text-shadow: 0 0 20px #FFFF00;
        transform: scale(1.15) rotate(1deg);
    }
    
    76% {
        color: #000000;
        text-shadow: 0 0 15px #FF00FF;
        transform: scale(0.85) rotate(-1deg);
    }
    
    77% {
        color: #00FFFF;
        text-shadow: 0 0 10px #00FFFF;
        transform: scale(1.05);
    }
    
    78% {
        color: #00FF00;
        text-shadow: 0 0 5px #00FF00;
        transform: scale(1);
    }
}

/* ---------- TOOLTIP SYSTEM ---------- */
.tooltip {
    position: relative;
    display: inline-block;
    border-bottom: 1px dotted #00FFFF;
    color: #00FFFF;
    cursor: help;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 300px;
    background-color: rgba(0, 0, 0, 0.9);
    color: #00FF00;
    text-align: left;
    border: 1px solid #00FFFF;
    box-shadow: 0 0 10px #00FFFF;
    padding: 10px;
    border-radius: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -150px;
    opacity: 0;
    transition: opacity 0.3s;
}

.tooltip .tooltiptext.below {
    bottom: auto;
    top: 125%;
}

.tooltip .tooltiptext::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #00FFFF transparent transparent transparent;
}

.tooltip .tooltiptext.below::after {
    top: auto;
    bottom: 100%;
    border-color: transparent transparent #00FFFF transparent;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
}

.tooltip:hover {
    animation: tooltip-glitch 1s infinite;
}

@keyframes tooltip-glitch {
    0%, 100% { text-shadow: 0 0 2px #00FFFF; }
    33% { text-shadow: -1px 0 #FF00FF, 1px 0 #00FFFF; }
    66% { text-shadow: 1px 0 #FF00FF, -1px 0 #00FFFF; }
}

/* ---------- SPECIAL ENTITY EFFECTS ---------- */
/* Zure Diamond Animation */
@keyframes zure-diamond-spin {
    0% { transform: translate(-50%, -50%) rotate(45deg) scale(1); }
    50% { transform: translate(-50%, -50%) rotate(225deg) scale(1.2); }
    100% { transform: translate(-50%, -50%) rotate(405deg) scale(1); }
}

#zure-diamond::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 20px;
    right: 20px;
    bottom: 20px;
    background: linear-gradient(135deg, rgba(255,255,255,0.9), rgba(200,200,255,0.2));
    transform: rotate(45deg);
}

#zure-diamond::after {
    content: '';
    position: absolute;
    top: 30px;
    left: 30px;
    right: 30px;
    bottom: 30px;
    background: rgba(255,255,255,0.3);
    transform: rotate(15deg);
}

/* Lux Effect - Elegant but glitchy with gold and cyan */
.lux-text {
    position: relative;
    text-align: right;
    display: block;
    width: 100%;
    color: #FFD700;
    font-family: 'Times New Roman', serif;
    letter-spacing: 1px;
    font-style: italic;
    text-shadow: 0 0 5px #FFD700;
    animation: lux-flicker 4s infinite cubic-bezier(0.42, 0, 0.58, 1);
    margin: 0.5em 0;
}

@keyframes lux-flicker {
    0%, 100% { 
        color: #FFD700; 
        text-shadow: 0 0 5px #FFD700;
        transform: scale(1);
    }
    
    25% {
        color: #00FFFF; 
        text-shadow: 0 0 8px #00FFFF, 0 0 12px #00FFFF;
        transform: scale(1.02) translateX(1px);
    }
    
    26% {
        color: #FFFFFF;
        text-shadow: 0 0 10px #FFFFFF;
    }
    
    27% {
        color: #00FFFF;
        text-shadow: 0 0 8px #00FFFF;
        transform: scale(0.98) translateX(-1px);
    }
    
    50% {
        color: #FFD700; 
        text-shadow: 0 0 5px #FFD700;
        transform: scale(1);
    }
    
    75% {
        color: #FF00FF; 
        text-shadow: 0 0 8px #FF00FF, 0 0 12px #FF00FF;
        transform: scale(1.02) translateY(-1px);
    }
    
    76% {
        color: #FFFFFF;
        text-shadow: 0 0 10px #FFFFFF;
    }
    
    77% {
        color: #FF00FF;
        text-shadow: 0 0 8px #FF00FF;
        transform: scale(0.98) translateY(1px);
    }
}

.lux-text::before {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: rgba(255, 215, 0, 0.5);
    z-index: -1;
    animation: lux-shimmer 6s linear infinite;
}

@keyframes lux-shimmer {
    0% { transform: translateX(-2px) translateY(1px); opacity: 0.3; }
    25% { transform: translateX(1px) translateY(-1px); opacity: 0.6; }
    50% { transform: translateX(2px) translateY(1px); opacity: 0.3; }
    75% { transform: translateX(-1px) translateY(-1px); opacity: 0.6; }
    100% { transform: translateX(-2px) translateY(1px); opacity: 0.3; }
}

.lux-text::after {
    content: attr(data-text);
    position: absolute;
    left: 0;
    top: 0;
    color: #00FFFF;
    z-index: -2;
    clip-path: inset(0 0 0 0);
    animation: lux-glitch 8s infinite;
}

@keyframes lux-glitch {
    0%, 91%, 100% { clip-path: inset(100% 0 0 0); transform: translateX(0); }
    92% { clip-path: inset(20% 0 40% 0); transform: translateX(2px); }
    93% { clip-path: inset(60% 0 20% 0); transform: translateX(-2px); }
    94% { clip-path: inset(0 0 80% 0); transform: translateX(1px); }
    95% { clip-path: inset(100% 0 0 0); transform: translateX(0); }
}

.lux-text:hover {
    animation: lux-hover 1s infinite;
    text-shadow: 0 0 10px #FFD700, 0 0 15px #FFD700;
}

@keyframes lux-hover {
    0%, 100% { color: #FFD700; transform: scale(1.05); }
    50% { color: #FFFFFF; text-shadow: 0 0 15px #FFFFFF, 0 0 20px #FFFFFF; transform: scale(1.1); }
}

